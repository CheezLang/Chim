use import std.array
use import std.rc
use import std.string
use import std.unicode
use import std.map

io  :: import std.io
fmt :: import std.fmt

use import lua
lua :: import lua_cheez

use import glfw_hl

use import chim
use import editor
use import gap_buffer
use import editor_input
use import editor_render
use import clipboard
use import commands

#export_scope

UserData :: enum {
    None
    UDBuffer    : Rc[Buffer]
    UDView      : Rc[View]
    UDTab       : Rc[Tab]
}
BUFFER_METATABLE    :: "__metatable_buffer"
VIEW_METATABLE      :: "__metatable_view"
TAB_METATABLE       :: "__metatable_tab"

ScriptingEngine :: struct {
    state : lua.State
}

impl ScriptingEngine {
    new :: () -> Result[Rc[ScriptingEngine], String] {
        mut state := try_with(lua.State.new(), {
            return Err(fmt.format("Failed to create lua state: {}", [err]))
        })

        state.open_libs()

        // create buffer metatable
        state.create_table(nrec = 5)
        state.push_function(user_data_index)
        state.set_field(-2, "__index")
        // state.push_function(buffer_index)
        // state.set_field(-2, "__custom_index")
        // state.push_function(drop_buffer)
        // state.set_field(-2, "__gc")
        // state.push_function(buffer_insert)
        // state.set_field(-2, "insert")
        state.set_global(BUFFER_METATABLE)

        // create chim functions
        state.create_table()
        state.push_function(lua_chim_command)
        state.set_field(-2, "command")
        state.push_function(lua_chim_map)
        state.set_field(-2, "map")
        state.push_function(lua_chim_map_language)
        state.set_field(-2, "map_language")
        state.set_global("chim")

        // create table for callbacks
        state.create_table()
        state.set_global("__callbacks")

        return Ok(Rc[ScriptingEngine].new(ScriptingEngine(
            state   = state
        )))
    }

    load_file :: (&mut Self, path: string) -> Result[(), String] {
        try(self.state.do_file(path))
        return Ok()
    }

    execute_script :: (&mut Self, script: string) -> Result[(), String] {
        try(self.state.do_string(script))
        return Ok()
    }

    run_callback :: (&mut Self, count: int, ref: int, args: []Argument) -> Result[(), String] {
        state.get_global("__callbacks")
        defer state.pop(1)
        typ := lua.Type(lua_rawgeti(state.state, -1, ref))
        return match typ {
            .Function -> {
                state.push_int(count)
                for &arg in args {
                    match arg {
                        .Char($ch) -> {
                            state.push_char(*ch)
                        }

                        .Str($str) -> {
                            state.push_string(str.slice())
                        }

                        $arg -> {
                            return Err(fmt.format("Argument {} not implemented yet", [arg]))
                        }
                    }
                }

                try(state.call(args.length + 1, Some(0)))
                Ok()
            }

            $typ -> Err(fmt.format("Callback {} is not a function but {}", [ref, typ]))
        }
    }
}

lua_chim_map :: (state: &mut lua.State) -> Result[int, String] {
    arg_count := state.get_top()
    if arg_count < 3 {
        return Err(fmt.format("Missing arguments"))
    }

    // check if first arg is string
    mode_name := try(state.to_string(1))
    key_combo := try(state.to_string(2))

    return create_mapping(state, "", mode_name, key_combo, 3)
}

lua_chim_map_language :: (state: &mut lua.State) -> Result[int, String] {
    arg_count := state.get_top()
    if arg_count < 4 {
        return Err(fmt.format("Missing arguments"))
    }

    // check if first arg is string
    language    := try(state.to_string(1))
    mode_name   := try(state.to_string(2))
    key_combo   := try(state.to_string(3))

    return create_mapping(state, language, mode_name, key_combo, 4)
}

create_mapping :: (state: &mut lua.State, language: string, mode_name: string, key_combo: string, action_index: int) -> Result[int, String] {
    arg_count := state.get_top()
    // io.formatln("create_mapping({}, {}, {}, {})", [language, mode_name, key_combo, action_index])

    mode := if mode_name == "normal" {
        InputMode.Normal
    } else if mode_name == "insert" {
        InputMode.Insert
    } else if mode_name == "visual" {
        InputMode.Visual
    } else {
        return Err(fmt.format("Unknown mode '{}'", [mode_name]))
    }

    // parse key_combo
    ParseState :: enum #copy {
        Normal
        Escaped
    }
    mut parse_state := ParseState.Normal
    mut parsers := Array[Rc[Parser]].new()
    mut escape_start := -1
    for c in key_combo {
        match parse_state {
            .Normal -> {
                if c == '{' {
                    if byte_index + 1 >= key_combo.bytes.length {
                        return Err(fmt.format("Invalid key combo: '{}'", [key_combo]))
                    }
                    parse_state = .Escaped
                    escape_start = byte_index + 1
                } else {
                    mut mods := GlfwMod.None
                    c := if c.is_upper() {
                        mods = mods or .Shift
                        c.to_lower()
                    } else c
                    parsers.add(KeyParser.new(.Char(c), mods))
                }
            }

            .Escaped -> {
                if c == '{' {
                    parsers.add(KeyParser.new(.Char(c), .None))
                    parse_state = .Normal
                    escape_start = -1
                } else if c == '}' {
                    escape_sequence := key_combo[escape_start .. byte_index]

                    parts := escape_sequence.split_at_char(' ', true).to_array()

                    modstr, keystr := if parts.count() == 1 {
                        "", parts[0].slice()
                    } else {
                        parts[0].slice(), parts[1].slice()
                    }

                    mut mods := GlfwMod.None
                    for c in modstr {
                        match c {
                            'C' -> {
                                if GlfwMod.Control is in mods {
                                    return Err(fmt.format("Duplicate modifier Control"))
                                }
                                mods = mods or .Control
                            }
                            'S' -> {
                                if GlfwMod.Shift is in mods {
                                    return Err(fmt.format("Duplicate modifier Shift"))
                                }
                                mods = mods or .Shift
                            }
                            'A' -> {
                                if GlfwMod.Alt is in mods {
                                    return Err(fmt.format("Duplicate modifier Alt"))
                                }
                                mods = mods or .Alt
                            }
                            $ch -> {
                                return Err(fmt.format("Unknown modifier '{}'", [ch]))
                            }
                        }
                    }

                    parser : Rc[Parser] = if keystr == "Space" {
                        KeyParser.new(.Space, mods)
                    } else if keystr == "Enter" {
                        KeyParser.new(.Enter, mods)
                    } else if keystr == "Backspace" {
                        KeyParser.new(.Backspace, mods)
                    } else if keystr == "Delete" {
                        KeyParser.new(.Delete, mods)
                    } else if keystr == "Tab" {
                        KeyParser.new(.Tab, mods)
                    } else if keystr == "Escape" {
                        KeyParser.new(.Escape, mods)
                    } else if keystr == "Home" {
                        KeyParser.new(.Home, mods)
                    } else if keystr == "End" {
                        KeyParser.new(.End, mods)
                    } else if keystr == "PageUp" {
                        KeyParser.new(.PageUp, mods)
                    } else if keystr == "PageDown" {
                        KeyParser.new(.PageDown, mods)
                    } else if keystr == "Up" {
                        KeyParser.new(.Up, mods)
                    } else if keystr == "Down" {
                        KeyParser.new(.Down, mods)
                    } else if keystr == "Left" {
                        KeyParser.new(.Left, mods)
                    } else if keystr == "Right" {
                        KeyParser.new(.Right, mods)
                    } else {
                        if mods == .None and keystr == "char" {
                            CharParser.new()
                        } else {
                            ch, len := Utf8.decode(keystr.bytes)
                            if int(len) != keystr.bytes.length {
                                return Err(fmt.format("Unknown control sequence '{}'", [keystr]))
                            }
                            KeyParser.new(.Char(ch), mods)
                        }
                    }

                    // io.formatln("escape_sequence: '{}', {}, {}", [escape_sequence, mods, key])
                    parsers.add(parser)
                    parse_state = .Normal
                    escape_start = -1
                }
            }
        }
    }

    match state.typ(action_index) {
        .Function -> {
            state.get_global("__callbacks")
            state.push_value(action_index)
            ref := state.ref(-2)
            state.pop(1) // pop __callbacks

            // io.formatln("mapping {}.{} to script function {}", [mode, key_combo, ref])
            g_chim.register_command(language, mode, SequenceParser.new(.Script(ref), [], parsers[..]))
        }

        .String -> {
            command := state.to_string(action_index).unwrap()
            mut args := Array[Argument].new()
            if arg_count > action_index {
                for {action_index + 1} ..= arg_count {
                    match state.typ(it) {
                        .String -> {
                            args.add(Argument.Str(state.to_string(it).unwrap().to_owned()))
                        }
                        $typ -> {
                            return Err(fmt.format("Invalid argument typ at index {}", [it_index]))
                        }
                    }
                }
            }

            // io.formatln("mapping {}.{} to {} ({})", [mode, key_combo, command, args[..]])
            g_chim.register_command(language, mode, SequenceParser.new2(.BuiltIn(command.to_owned()), args, parsers[..]))
        }

        $typ -> {
            return Err(fmt.format("3rd argument must be a function or a string but is '{}'", [typ]))
        }
    }

    return Ok(0)
}

lua_chim_command :: (state: &mut lua.State) -> Result[int, String] {
    arg_count := state.get_top()
    if arg_count < 1 {
        return Err(fmt.format("Missing arguments"))
    }

    // check if first arg is string
    if state.typ(1) != .String {
        return Err(fmt.format("First argument must be a string"))
    }

    command_name := try(state.to_string(1))

    mut args := Array[Argument].new()
    if arg_count > 1 {
        for 2 ..= arg_count {
            match state.typ(it) {
                .String -> {
                    args.add(Argument.Str(state.to_string(it).unwrap().to_owned()))
                }
                $typ -> {
                    return Err(fmt.format("Invalid argument typ at index {}", [it_index]))
                }
            }
        }
    }

    command := try(Command.parse(0, command_name, args[..]))
    // io.formatln("chim.command({}, {}): {}", [command_name, args[..], &command])
    g_chim.commands.push(command)

    return Ok(0)
}

/// args: self, key
user_data_index :: (state: &mut lua.State) -> Result[int, String] {
    arg_count := state.get_top()
    if arg_count != 2 {
        return Err(fmt.format("[user_data_index] only accepts exactly 2 arguments"))
    }

    user_data := cast(^mut UserData) try_with(state.to_user_data(1), {
        return Err(fmt.format("[user_data_index] not a userdata"))
    })

    // push metatable of user data at index 3
    if !state.get_metatable(1) {
        return Err(fmt.format("[user_data_index] no key found"))
    }
    // push key
    state.push_value(2)
    typ := lua.Type(lua_rawget(state.state, 3))
    return match typ {
        .Nil -> match state.get_field(3, "__custom_index") {
            .Nil -> Err(fmt.format("[user_data_index] no key found"))
            $typ -> {
                state.push_value(1)
                state.push_value(2)
                try(state.call(2))
                Ok(1)
            }
        }
        _ -> Ok(1)
    }
}

// drop_buffer :: (state: &mut lua.State) -> Result[int, String] {
//     user_data := cast(^mut UserData) try_with(state.to_user_data(-1), {
//         return Err(fmt.format("[drop_buffer] not a userdata"))
//     })

//     return match &*user_data {
//         .Buff($buffer) -> {
//             buffer.drop()
//             *user_data = UserData.None
//             Ok(0)
//         }

//         _ -> Err(fmt.format("[drop_buffer] not a buffer"))
//     }
// }

// new_buffer :: (state: &mut lua.State) -> Result[int, String] {
//     name := try_with(state.to_string(-1), {
//         return Err(fmt.format("[new_buffer] Argument must be a string"))
//     })

//     mem := cast(^mut UserData) state.new_user_data_uv(@sizeof(UserData), 0)
//     *mem = UserData.Buff(Rc[Buffer].new(Buffer(name.to_owned())))

//     // set metatable
//     state.get_global(BUFFER_METATABLE)
//     state.set_metatable(-2)

//     return Ok(1)
// }

// buffer_index :: (state: &mut lua.State) -> Result[int, String] {
//     arg_count := state.get_top()
//     if arg_count != 2 {
//         return Err(fmt.format("[buffer_index] only accepts exactly 1 arguments"))
//     }

//     user_data := cast(^mut UserData) try_with(state.to_user_data(1), {
//         return Err(fmt.format("[buffer_index] not a userdata"))
//     })

//     return match &*user_data {
//         .Buff($buffer) -> match state.to_int(2) {
//             Ok($value) -> {
//                 if value == 0 {
//                     state.push_nil()
//                     return Ok(1)
//                     // return Err(fmt.format("[buffer_index] index 0 is out of range"))
//                 }
//                 name := buffer.get().name.slice()
//                 index := int.clamp(if value < 0 {
//                     name.bytes.length + value + 1
//                 } else {
//                     value
//                 }, 1, name.bytes.length)
//                 state.push_string(name[(index - 1) .. index])
//                 Ok(1)
//             }
//             Err($err) -> Err(fmt.format("[buffer_index] index must be an int: {}", [&err]))
//         }

//         $value -> Err(fmt.format("[buffer_index] not a buffer: {}", [value]))
//     }
// }

// buffer_insert :: (state: &mut lua.State) -> Result[int, String] {
//     arg_count := state.get_top()
//     if arg_count != 4 {
//         return Err(fmt.format("[buffer_insert] only accepts exactly 3(4) arguments"))
//     }

//     user_data := cast(^mut UserData) try_with(state.to_user_data(1), {
//         return Err(fmt.format("[buffer_insert] not a userdata"))
//     })

//     return match &*user_data {
//         .Buff($buffer) -> {
//             line := state.to_int(2).unwrap()
//             column := state.to_int(3).unwrap()
//             text := state.to_string(4).unwrap()
//             buffer.get_mut().insert(line, column, text)
//             Ok(0)
//         }

//         $value -> Err(fmt.format("[buffer_insert] not a buffer: {}", [value]))
//     }
// }