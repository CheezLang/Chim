#lib("./../icons/icon.res")

use import std.rc
use import std.box
use import std.string
use import std.array
use import std.map
use import std.ring_queue
use import std.unicode
use import std.hash
use import std.mem.std_heap_allocator

mem :: import std.mem.allocator
io  :: import std.io
fmt :: import std.fmt
C   :: import std.c

use import glfw
use import glfw_hl

use import imgui_hl
use import imgui_opengl
imgui :: import imgui
lua :: import lua_cheez

use import editor
use import gap_buffer
use import editor_input
use import editor_render
use import clipboard
use import commands
use import scripting

vec2 :: imgui.ImVec2
vec4 :: imgui.ImVec4

vec2_zero : vec2 = vec2(0, 0)
vec4_zero : vec4 = vec4(0, 0, 0, 0)

#export_scope

SLOTS_X :: 2048
SLOTS_Y :: 2048

Slot :: struct {
    c   : char
    fg  : PaletteIndex
    bg  : PaletteIndex
    col : int = 0
}

Mode :: enum #copy {
    Normal
    Insert
    Visual
    Command
}

impl Hashable for Mode {
    hash :: (&Self) -> u64 {
        as_num := u64(*self)
        return as_num.hash()
    }
}

impl Equatable[Mode] for Mode {
    equal :: (&Self, other: &Mode) -> bool {
        return *self == *other
    }
}

CursorType :: enum #copy {
    Line
    Full
    Underscore
}

Parsers :: struct {
    normal  := Array[Rc[Parser]].new()
    move    := Array[Rc[Parser]].new()
}

mut g_chim : ^mut Chim = null

Chim :: struct {
    slots               : []mut Slot
    /// path of this executable
    exe_path            := ".".to_owned()

    scripting_engine    := Rc[ScriptingEngine].empty()

    cursors             := Array[(col: int, row: int, typ: CursorType)].new()
    commands            := RingQueue[Command].new()
    last_move_command   := Option[(count: int, command: MoveCommand)].None

    key_events          := Array[KeyEvent].new(20)

    // normal_mode
    parsers             := Map[Mode, Parsers].new()
    current_parser      := Option[Rc[Parser]].None

    // editor stuff
    current_mode    := Mode.Normal
    recording_macro := false

    tabs            := Array[Rc[Tab]].new()
    active_tab      := 0
    buffers         := Array[Rc[Buffer]].new()
    command_view    := Rc[View].empty()
    active_view     := Rc[View].empty()

    window_pixel_size   := vec2(0, 0)
    has_focus           := false

    // settings
    wrapping_enabled    := true
    highlight_curr_line := true
    line_number_mode    := LineNumberMode.RelativeCursor
    show_whitespace     := true
    tab_width           := 4
    cursor_margin       := 0
    use_tab_char        := false

    // modifiers, keys, etc.
    current_mods_l  := GlfwMod.None
    current_mods_r  := GlfwMod.None
    current_mods    := GlfwMod.None

    // font stuff
    current_font    := String.empty()
    font_size       := 16.0f
    character_size  := vec2(21, 16)

    // theme stuff
    palette         := Palette.dark()

    // debug stuff
    vsync               := true
    show_debug_window   := false
    show_demo_window    := false
}

impl Drop for Chim {
    drop :: (&Self) {
        mem.free_n(self.slots)
    }
}

impl Chim {
    new :: () -> Chim {
        slots := mem.alloc_n(Slot, SLOTS_X * SLOTS_Y)
        C.memset(cast slots.data, 0, cast @sizeof(Slot) * slots.length)
        return Chim(
            slots = slots
        )
    }

    on_framebuffer_resize :: (&mut Self, width: f32, height: f32) {
        self.window_pixel_size = vec2(width, height)
    }

    on_focus :: (&mut Self, focused: i32) {
        if focused == 0 {
            current_mods_l = .None
            current_mods_r = .None
            current_mods = current_mods_l or current_mods_r
        }
    }

    on_iconify :: (&mut Self, iconified: i32) {
        if iconified != 0 {
            current_mods_l = .None
            current_mods_r = .None
            current_mods = current_mods_l or current_mods_r
        }
    }

    initialize :: (&mut Self, exe_path: String, args: []String) -> Result[(), String] {
        g_chim = ^*self

        self.scripting_engine = try(ScriptingEngine.new())

        self.exe_path = exe_path.clone()
        for row in 0 .. SLOTS_X {
            for col in 0 .. SLOTS_Y {
                *self.slots[col + row * SLOTS_X] = Slot('Â´', .Comment, .Background)
            }
        }

        self.set_font("FiraMono-Regular.ttf")
        self.set_font_size(18.5f)

        if args.length > 0 {
            for &file in args {
                match Buffer.from_file(file.slice()) {
                    Ok($buffer) -> {
                        self.buffers.add(buffer.clone())
                        tabs.add(Tab.new(View.new(buffer)))
                    }
                    Err() -> {
                        io.formatln("[ERROR] Failed to load file '{}'", [file.slice()])
                    }
                }
            }
        }

        if self.buffers.count() == 0 {
            scratch_buffer := Buffer.scratch()
            self.buffers.add(scratch_buffer.clone())
            tabs.add(Tab.new(View.new(scratch_buffer.clone())))
        }
        self.active_view = tabs[0].get().get_active_view()

        // create command buffer and view
        {
            buffer := Buffer.scratch()
            self.command_view = View.new(buffer)
        }

        config_path := fmt.format("{}/config/config.lua", [&exe_path])
        // config_path := fmt.format("./config/config.lua", [&exe_path])
        io.formatln("[Chim] loading config file...")
        try_with(self.scripting_engine.get_mut().load_file(config_path.slice()), {
            io.formatln("[ERROR] Failed to load '{}': {}", [&config_path, &err])
        })
        io.formatln("[Chim] config file loaded")

        return Ok()
    }

    register_command :: (&mut Self, mode: Mode, command: string, args: []Argument, steps: []Rc[Parser]) {
        if !self.parsers.contains(mode) {
            self.parsers.set(mode, Parsers())
        }

        self.parsers[mode].normal.add(SequenceParser.new(.BuiltIn(command.to_owned()), args, steps))
    }

    register_move_command :: (&mut Self, mode: Mode, command: string, args: []Argument, steps: []Rc[Parser]) {
        if !self.parsers.contains(mode) {
            self.parsers.set(mode, Parsers())
        }

        self.parsers[mode].move.add(SequenceParser.new(.BuiltIn(command.to_owned()), args, steps))
    }

    get_window_dim :: (&Self) -> (cols: int, rows: int) {
        rows := int(self.window_pixel_size.y / self.character_size.y)

        mut scale := self.character_size.x * (self.window_pixel_size.y / (self.character_size.y * f32(rows)))

        return int(self.window_pixel_size.x / scale), rows
    }

    set_font :: (&mut Self, path: string) {
        self.commands.push(Command(1, .ChangeFont(path.to_owned())))
    }

    set_font_size :: (&mut Self, size: f32) {
        self.commands.push(Command(1, .ChangeFontSize(size)))
    }

    update :: (&mut Self) {
        mut font_changed := false
        mut rerender := false

        while self.commands.count() > 0 {
            command := self.commands.pop()

            match &command.typ {
                .ChangeFontSize($size) -> {
                    if *size >= 10 {
                        self.font_size = *size
                        font_changed = true
                    }
                }

                .ChangeFont($path) -> {
                    self.current_font.clear()
                    fmt.format_into(&mut self.current_font, "{}/fonts/{}", [self.exe_path.slice(), path])
                    font_changed = true
                }

                $cmd -> {
                    self.execute_command(command.count, command.typ.clone())
                }
            }
        }

        if font_changed {
            iio := imgui.GetIO()
            iio.Fonts.Clear()
            font := iio.Fonts.AddFontFromFileTTF(self.current_font.as_cstring(), self.font_size, null, null)
            iio.Fonts.Build()
            ImGui_ImplOpenGL3_DestroyFontsTexture()
            ImGui_ImplOpenGL3_CreateFontsTexture()
            self.character_size = font.CalcTextSizeA(self.font_size, f32.max, -1, "#", null, null)
        }

        self.active_tab = self.active_tab.clamp(0, self.tabs.count() - 1)


        // @temp
        rerender = true

        if rerender {
            cols, rows := self.get_window_dim()

            // clear right-most column
            for r in 0 .. rows {
                *self.slots[cols + r * SLOTS_X] = Slot('`0', .Default, .Background)
            }

            self.render_tab_bar(0)

            command_line_count := self.command_view.get().buffer.get().lines.count()
            command_view_rows := command_line_count.clamp(1, 10)

            self.render_tab(self.tabs[self.active_tab].get(), (0, 1), (cols, rows - 1 - command_view_rows))

            self.render_status_line(rows - 1 - command_view_rows)
            self.render_command_line(rows - command_view_rows, command_view_rows)
        }
    }
}