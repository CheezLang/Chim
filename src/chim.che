use import std.rc
use import std.box
use import std.string
use import std.array
use import std.ring_queue
use import std.gap_buffer
use import std.unicode

mem :: import std.mem.allocator
io  :: import std.io
fmt :: import std.fmt
C   :: import std.c

use import glfw
use import glfw_hl

use import imgui_hl
use import imgui_opengl
imgui :: import imgui

use import editor

vec2 :: imgui.ImVec2
vec4 :: imgui.ImVec4

vec2_zero : vec2 = vec2(0, 0)
vec4_zero : vec4 = vec4(0, 0, 0, 0)

SLOTS_X :: 2048
SLOTS_Y :: 2048

#export_scope

Slot :: struct {
    c   : char
    fg  : PaletteIndex
    bg  : PaletteIndex
}

PaletteIndex :: enum #tag_type(i32) #copy {
    Default
    Keyword
    Number
    String
    CharLiteral
    Punctuation
    Preprocessor
    Identifier
    KnownIdentifier
    PreprocIdentifier
    Comment
    MultiLineComment
    Background
    MenuBackground
    Cursor
    Selection
    ErrorMarker
    Breakpoint
    LineNumber
    CurrentLineFill
    CurrentLineFillInactive
    CurrentLineEdge
    Max
}

Command :: enum {
    ChangeFontSize  : f32
    ChangeFont      : String
    TabNext
    TabPrev
}

Palette :: struct {
    values : [int(PaletteIndex.Max)]u32
}

impl Palette {
    dark :: () -> Palette {
        mut values : [int(PaletteIndex.Max)]u32 = default
        *values[int(PaletteIndex.Default)]                   = 0xff7f7f7f
        *values[int(PaletteIndex.Keyword)]                   = 0xffd69c56
        *values[int(PaletteIndex.Number)]                    = 0xff00ff00
        *values[int(PaletteIndex.String)]                    = 0xff7070e0
        *values[int(PaletteIndex.CharLiteral)]               = 0xff70a0e0
        *values[int(PaletteIndex.Punctuation)]               = 0xffffffff
        *values[int(PaletteIndex.Preprocessor)]              = 0xff408080
        *values[int(PaletteIndex.Identifier)]                = 0xffaaaaaa
        *values[int(PaletteIndex.KnownIdentifier)]           = 0xff9bc64d
        *values[int(PaletteIndex.PreprocIdentifier)]         = 0xffc040a0
        *values[int(PaletteIndex.Comment)]                   = 0xff206020
        *values[int(PaletteIndex.MultiLineComment)]          = 0xff406020
        *values[int(PaletteIndex.Background)]                = 0xff101010
        *values[int(PaletteIndex.MenuBackground)]            = 0xff202020
        *values[int(PaletteIndex.Cursor)]                    = 0xffe0e0e0
        *values[int(PaletteIndex.Selection)]                 = 0x80a06020
        *values[int(PaletteIndex.ErrorMarker)]               = 0x800020ff
        *values[int(PaletteIndex.Breakpoint)]                = 0x40f08000
        *values[int(PaletteIndex.LineNumber)]                = 0xff707000
        *values[int(PaletteIndex.CurrentLineFill)]           = 0x40000000
        *values[int(PaletteIndex.CurrentLineFillInactive)]   = 0x40808080
        *values[int(PaletteIndex.CurrentLineEdge)]           = 0x40a0a0a0
        return Palette(values)
    }

    get :: (&Self, index: PaletteIndex) -> u32 {
        return *self.values[int(index)]
    }
}

Mode :: enum #copy {
    Normal
    Insert
    Visual
}

CursorType :: enum #copy {
    Line
    Full
    Underscore
}

Chim :: struct {
    slots           : []mut Slot
    
    cursors         := Array[(col: int, row: int, typ: CursorType)].new()
    commands        := RingQueue[Command].new()

    // editor stuff
    current_mode    := Mode.Normal
    recording_macro := false

    tabs            := Array[Rc[Tab]].new()
    buffers         := Array[Rc[Buffer]].new()

    current_buffer  := Rc[Buffer].empty()

    active_tab      := 0

    window_pixel_size := vec2(0, 0)

    // modifiers, keys, etc.
    current_mods_l  := GlfwMod.None
    current_mods_r  := GlfwMod.None
    current_mods    := GlfwMod.None

    // font stuff
    current_font    := String.empty()
    font_size       := 16.0f
    character_size  := vec2(21, 16)

    // theme stuff
    palette         := Palette.dark()

    // debug stuff
    show_debug_window := false
    show_demo_window := false
}

impl Drop for Chim {
    drop :: (&Self) {
        mem.free_n(self.slots)
    }
}

impl Chim {
    new :: () -> Chim {
        slots := mem.alloc_n(Slot, SLOTS_X * SLOTS_Y)
        C.memset(cast slots.data, 0, cast @sizeof(Slot) * slots.length)
        return Chim(
            slots = slots
        )
    }

    on_framebuffer_resize :: (&mut Self, width: f32, height: f32) {
        self.window_pixel_size = vec2(width, height)
    }

    on_key :: (&mut Self, key: GlfwKey, scancode: i32, action: GlfwAction, mods: GlfwMod) {
        match action, key {
            use GlfwKey
            use GlfwAction
            use GlfwMod

            Press, LeftShift        -> { current_mods_l = current_mods_l or Shift }
            Release, LeftShift      -> { current_mods_l = current_mods_l and !Shift }
            Press, RightShift       -> { current_mods_r = current_mods_r or Shift }
            Release, RightShift     -> { current_mods_r = current_mods_r and !Shift }

            Press, LeftControl      -> { current_mods_l = current_mods_l or Control }
            Release, LeftControl    -> { current_mods_l = current_mods_l and !Control }
            Press, RightControl     -> { current_mods_r = current_mods_r or Control }
            Release, RightControl   -> { current_mods_r = current_mods_r and !Control }

            Press, LeftAlt          -> { current_mods_l = current_mods_l or Alt }
            Release, LeftAlt        -> { current_mods_l = current_mods_l and !Alt }
            Press, RightAlt         -> { current_mods_r = current_mods_r or Alt }
            Release, RightAlt       -> { current_mods_r = current_mods_r and !Alt }

            Press, LeftSuper        -> { current_mods_l = current_mods_l or Super }
            Release, LeftSuper      -> { current_mods_l = current_mods_l and !Super }
            Press, RightSuper       -> { current_mods_r = current_mods_r or Super }
            Release, RightSuper     -> { current_mods_r = current_mods_r and !Super }

            Press, F1               -> {
                self.show_debug_window = !self.show_debug_window
            }

            Press, F2               -> {
                self.show_demo_window = !self.show_demo_window
            }
            Press, _ -> {
                match self.current_mods, key {
                    None, Escape -> {
                        self.current_mode = .Normal
                    }
                }
                if self.current_mods != .None {
                    io.formatln("key = '{}', scancode = '{}', action = '{}', mods = '{}'", [key, scancode, action, mods])
                }
            }

            _ -> {

            }
        }

        current_mods = current_mods_l or current_mods_r
    }

    on_char :: (&mut Self, c: char) {
        io.formatln("char = '{}'", [c])


        match self.current_mode {
            .Normal -> {
                if c == 'i' {
                    self.current_mode = .Insert
                }
                if c == 't' {
                    self.commands.push(.TabNext)
                }
                if c == 'n' {
                    self.commands.push(.TabPrev)
                }
            }

            .Insert -> {

                tab := self.tabs[self.active_tab].get()
                view := tab.get_active_view()
                view.get_mut().insert_char(c)
            }
        }
    }

    on_focus :: (&mut Self, focused: i32) {
        if focused == 0 {
            current_mods_l = .None
            current_mods_r = .None
            current_mods = current_mods_l or current_mods_r
        }
    }

    on_iconify :: (&mut Self, iconified: i32) {
        if iconified != 0 {
            current_mods_l = .None
            current_mods_r = .None
            current_mods = current_mods_l or current_mods_r
        }
    }

    initialize :: (&mut Self) {
        for row in 0 .. SLOTS_X {
            for col in 0 .. SLOTS_Y {
                *self.slots[col + row * SLOTS_X] = Slot('Â´', .Comment, .Background)
            }
        }

        self.set_font("FiraMono-Regular.ttf")
        self.set_font_size(18)

        self.current_buffer = Buffer.scratch()
        self.buffers.add(self.current_buffer.clone())

        view := View.new(self.current_buffer.clone())

        tab := Tab.new(view.clone())

        tabs.add(tab.clone())
        tabs.add(Tab.new(view.clone()))
        tabs.add(Tab.new(view.clone()))
        tabs.add(Tab.new(view.clone()))
    }

    get_window_dim :: (&Self) -> (cols: int, rows: int) {
        cols := int(self.window_pixel_size.x / self.character_size.x)
        rows := int(self.window_pixel_size.y / self.character_size.y)
        return (cols + 1), rows
    }

    set_font :: (&mut Self, path: string) {
        self.commands.push(.ChangeFont(path.to_owned()))
    }

    set_font_size :: (&mut Self, size: f32) {
        self.commands.push(.ChangeFontSize(size))
    }

    update :: (&mut Self) {
        mut font_changed := false
        mut rerender := false

        while self.commands.count() > 0 {
            match self.commands.pop() {
                .ChangeFontSize($size) -> {
                    self.font_size = size
                    font_changed = true
                }

                .ChangeFont($path) -> {
                    self.current_font.clear()
                    fmt.format_into(&mut self.current_font, "fonts/{}", [path])
                    font_changed = true
                }

                .TabNext -> {
                    self.active_tab = (self.active_tab + 1) % self.tabs.count()
                }

                .TabPrev -> {
                    self.active_tab = (self.active_tab - 1 + self.tabs.count()) % self.tabs.count()
                }
            }
        }

        if font_changed {
            iio := imgui.GetIO()
            iio.Fonts.Clear()
            font := iio.Fonts.AddFontFromFileTTF(self.current_font.as_cstring(), self.font_size, null, null)
            iio.Fonts.Build()
            ImGui_ImplOpenGL3_DestroyFontsTexture()
            ImGui_ImplOpenGL3_CreateFontsTexture()
            self.character_size = font.CalcTextSizeA(self.font_size, f32.max, -1, "#", null, null)
        }

        self.active_tab = self.active_tab.clamp(0, self.tabs.count() - 1)


        // @temp
        rerender = true

        if rerender {
            cols, rows := self.get_window_dim()

            self.render_tab_bar(0)

            self.render_tab(self.tabs[self.active_tab].get(), (0, 1), (cols, rows - 2))

            self.render_status_line(rows - 2)
            self.render_command_line(rows - 1)
        }
    }

    render_tab :: (&mut Self, tab: &Tab, min: (col: int, row: int), max: (col: int, row: int)) {
        for r in min.row .. max.row {
            for c in min.col .. max.col {
                *self.slots[c + r * SLOTS_X] = Slot(' ', .Default, .Background)
            }
        }

        // @todo: handle multiple views
        view := tab.get_active_view()
        self.render_view(view.get(), min, max)
    }

    render_view :: (&mut Self, view: &View, min: (col: int, row: int), max: (col: int, row: int)) {
        count_digits :: (mut n: int) -> int {
            if n == 0 {
                return 1
            }
            mut count := 0
            while n != 0 {
                n = n / 10
                count += 1
            }
            return count
        }

        line_number_digits := 1 + match view.line_number_mode {
            .None -> 0
            .Absolute -> {
                last_line_no := view.top_line + (max.row - min.row)
                count_digits(last_line_no)
            }

            _ -> 0
        }

        buffer := view.buffer.get()

        for r in min.row .. max.row {
            match buffer.get_line(view.top_line + it_index) {
                Some($line) -> {
                    match view.line_number_mode {
                        .None -> {}
                        .Absolute -> {
                            line_no := view.top_line + it_index + 1
                            self.render_line_number(min.col, r, line_no, line_number_digits)
                        }

                        _ -> {}
                    }

                    for c in &line.characters {
                        col := min.col + line_number_digits + it_index
                        *self.slots[col + r * SLOTS_X] = Slot(c, .Default, .Background)
                    }
                }

                None -> break
            }

        }

        // render cursor
        cursor_type := match self.current_mode {
            .Normal -> CursorType.Full
            .Visual -> CursorType.Full
            .Insert -> CursorType.Line
            _       -> CursorType.Underscore
        }
        self.render_cursor(view.cursor.column + min.col + line_number_digits, view.cursor.line + min.row, cursor_type)
    }

    render_cursor :: (&mut Self, col: int, row: int, typ: CursorType) {
        self.cursors.add((col, row, typ))
    }

    render_line_number :: (&mut Self, col: int, row: int, number: int, align: int) {
        count_digits :: (mut n: int) -> int {
            if n == 0 {
                return 1
            }
            mut count := 0
            while n != 0 {
                n = n / 10
                count += 1
            }
            return count
        }
        digits := count_digits(number)
        for 0 .. (align - digits) {
            self.render_text_at(col + it_index, row, " ", .Default, .MenuBackground)
        }
        line_no_string := fmt.format("{}", [number])
        self.render_text_at(col + align - digits, row, line_no_string.slice(), .Default, .MenuBackground)
    }

    render_command_line :: (&mut Self, row: int) {
        mut col := 0

        // fill rest of line with menu background
        cols, _ := self.get_window_dim()
        for col .. cols {
            *self.slots[it + row * SLOTS_X] = Slot(' ', .Default, .MenuBackground)
        }
    }

    render_status_line :: (&mut Self, row: int) {
        mut col := 0
        col = self.render_text_at(col, row, "[", .Default, .MenuBackground)
        match self.current_mode {
            .Normal -> {
                col = self.render_text_at(col, row, "NORMAL", .Default, .MenuBackground)
            }

            .Insert -> {
                col = self.render_text_at(col, row, "INSERT", .Default, .MenuBackground)
            }

            .Visual -> {
                col = self.render_text_at(col, row, "VISUAL", .Default, .MenuBackground)
            }

            _ -> {}
        }
        col = self.render_text_at(col, row, "]", .Default, .MenuBackground)

        // fill rest of line with menu background
        cols, _ := self.get_window_dim()
        for col .. cols {
            *self.slots[it + row * SLOTS_X] = Slot(' ', .Default, .MenuBackground)
        }
    }

    render_tab_bar :: (&mut Self, row: int) {
        if self.tabs.count() == 0 {
            return
        }

        mut name_buffer := String.empty()

        mut col := 0
        for &tab in self.tabs[..] {
            if it_index > 0 {
                col = self.render_text_at(col, row, "|", .Default, .MenuBackground)
            }

            view := tab.get().get_active_view()

            name := match &view.get().buffer.get().file {
                Some($name) -> name.slice()
                None -> {
                    name_buffer.clear()
                    fmt.format_into(&mut name_buffer, "Untitled {}", [it_index])
                    name_buffer.slice()
                }
            }

            fg, bg := if it_index == self.active_tab {
                PaletteIndex.Default, PaletteIndex.Selection
            } else {
                PaletteIndex.Default, PaletteIndex.MenuBackground
            }

            col = self.render_text_at(col, row, name, fg, bg)
        }

        cols, _ := self.get_window_dim()
        for col .. cols {
            *self.slots[it + row * SLOTS_X] = Slot(' ', .Default, .MenuBackground)
        }
    }

    render_text_at :: (&mut Self, x: int, y: int, text: string, fg: PaletteIndex, bg: PaletteIndex) -> int {
        cols, rows := self.get_window_dim()
        if y < 0 or y >= rows or x < 0 {
            return x
        }

        mut col := x
        for c in text {
            if col >= cols {
                break
            }

            slot := self.slots[col + y * SLOTS_X]
            *slot = Slot(c, fg, bg)

            col += 1
        }
        return col
    }

    render :: (&mut Self) {
        imgui.SetNextWindowSize(&mut self.window_pixel_size, .None)

        mut pos := vec2(0, 0)
        mut pivot := vec2(0, 0)
        imgui.SetNextWindowPos(&mut pos, .None, &mut pivot)

        imgui.Begin("Editor", null, .NoResize or .NoMove or .NoCollapse or .NoDecoration)
        defer imgui.End()

        mut draw_list := imgui.GetWindowDrawList()

        self.window_pixel_size = imgui.GetContentRegionAvail()

        if self.character_size.x != 0 and self.character_size.y != 0 {
            cols, rows := self.get_window_dim()

            offset := imgui.GetWindowContentRegionMin() + imgui.GetWindowPos()

            scale := self.window_pixel_size.y / (self.character_size.y * f32(rows))
            scaled_size := self.character_size * scale

            imgui.SetWindowFontScale(scale)

            mut bg : u32 = self.palette.get(.Background)
            mut fg : u32 = 0xff000000
            mut utf8_bytes : [5]u8 = [0, 0, 0, 0, 0]

            for row in 0 .. rows {
                for col in 0 .. cols {
                    slot := self.slots[col + row * SLOTS_X]
                    fg = self.palette.get(slot.fg)
                    bg = self.palette.get(slot.bg)

                    pos_min := vec2(f32(col) * scaled_size.x + offset.x, f32(row) * scaled_size.y + offset.y)
                    pos_max := vec2(pos_min.x + scaled_size.x, pos_min.y + scaled_size.y)

                    // io.formatln("{}, {}", [pos_min, slot])
                    // break

                    draw_list.AddRectFilled(&pos_min, &pos_max, bg, 0, .None)

                    len := Utf8.encode_into(slot.c, utf8_bytes.data)
                    *utf8_bytes[int(len)] = 0
                    draw_list.AddText(&pos_min, fg, cast utf8_bytes.data, null)
                }
            }

            // render cursors
            for &c in self.cursors[..] {
                match c.typ {
                    .Line -> {
                        p1 := vec2(f32(c.col), f32(c.row)) * scaled_size + offset
                        p2 := p1 + vec2(0, scaled_size.y)
                        draw_list.AddLine(&p1, &p2, self.palette.get(.Cursor), scaled_size.x * 0.1f)
                    }
                    .Full -> {
                        p1 := vec2(f32(c.col), f32(c.row)) * scaled_size + offset
                        p2 := p1 + scaled_size
                        draw_list.AddRectFilled(&p1, &p2, self.palette.get(.Cursor), 0, .None)
                    }
                    .Underscore -> {
                        p1 := vec2(f32(c.col), f32(c.row) + 0.95f) * scaled_size + offset
                        p2 := p1 + vec2(scaled_size.x, 0)
                        draw_list.AddLine(&p1, &p2, self.palette.get(.Cursor), scaled_size.y * 0.1f)
                    }
                }
            }

            self.cursors.clear()

            // @assert(false)
        }
    }

    debug_render :: (&mut Self, delta_time: f64, fps: int) {
        if show_demo_window then
            imgui.ShowDemoWindow(^mut show_demo_window)

        if show_debug_window {

            imgui.Begin("Debug", null, .None)
            defer imgui.End()

            // show states of modifiers
            mut control := GlfwMod.Control is in current_mods
            imgui.Checkbox("Control", ^mut control)
            mut shift := GlfwMod.Shift is in current_mods
            imgui.Checkbox("Shift", ^mut shift)
            mut alt := GlfwMod.Alt is in current_mods
            imgui.Checkbox("Alt", ^mut alt)
            mut super := GlfwMod.Super is in current_mods
            imgui.Checkbox("Super", ^mut super)

            imgui.Separator()

            delta_time_str := fmt.format_any(delta_time)
            imgui.LabelText("Frame duration", delta_time_str.as_cstring())
            fps_counted_str := fmt.format_any(fps)
            imgui.LabelText("Fps", fps_counted_str.as_cstring())

            imgui.Separator()

            mut font_size := self.font_size
            if imgui.DragFloat("Font size", ^mut font_size, 1.0f, 10.0f, 90.0f, "%.1f", .None) {
                self.set_font_size(font_size)
            }

            imgui.BringWindowToDisplayFront(imgui.GetCurrentContext().CurrentWindow)
        }
    }
}