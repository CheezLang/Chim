use import std.rc
use import std.box
use import std.array
use import std.map
use import std.string
use import std.mem.arena_allocator

mem :: import std.mem.allocator
io :: import std.io
fs :: import std.io.fs

use import gap_buffer
use import editor

#export_scope

BufferLine :: struct {
    characters : GapBuffer[char]
}

impl BufferLine {
    empty :: (allocator: &mem.Allocator) -> BufferLine {
        return BufferLine(
            characters = GapBuffer[char].new(128, allocator)
        )
    }

    from_string :: (text: string, allocator: &mem.Allocator) -> BufferLine {
        chars := GapBuffer[char].new(text.bytes.length, allocator)
        for c in text {
            chars.append(c, allocator)
        }
        return BufferLine(
            characters = chars
        )
    }

    get_text :: (&Self) -> String {
        text := String.with_capacity(self.characters.count())
        for c in &self.characters {
            text.append_char(c)
        }
        return text
    }

    get_text_from :: (&Self, index: int) -> String {
        @assert(index <= self.characters.count())
        text := String.with_capacity(self.characters.count() - index)
        for c in &self.characters {
            if it_index < index then continue
            text.append_char(c)
        }
        return text
    }

    erase_from :: (&Self, index: int) {
        @assert(index <= self.characters.count())

        self.characters.move_gap(self.characters.count())
        while self.characters.count() > index {
            self.characters.truncate()
        }
    }
}

BufferEdit :: enum {
    InsertText  : (id: int, pos: Position, text: String)
    DeleteText  : (id: int, start: Position, end: Position)
    InsertLine  : (id: int, line: int, text: String)
    DeleteLine  : (id: int, line: int)
    Group       : Array[BufferEdit]
}

BufferEditRanges :: enum {
    None
    One     : (start: Position, end: Position)
    Many    : Map[int, (start: Position, end: Position)]
}

impl BufferEdit {
    collect_ranges :: (&Self, map: &mut Map[int, (start: Position, end: Position)]) {
        match self {
            .InsertText($edit) -> map.set(edit.id, (edit.pos, edit.pos))
            .InsertLine($edit) -> map.set(edit.id, (Position(edit.line, 0), Position(edit.line, 0)))
            .DeleteText($edit) -> map.set(edit.id, (edit.start, edit.end))
            .DeleteLine($edit) -> map.set(edit.id, (Position(edit.line, 0), Position(edit.line, 0)))
            .Group($group) -> {
                for(reverse=true) &change in group[..] {
                    change.collect_ranges(map)
                }
            }
            _ -> @assert(false)
        }
    }

    get_ranges :: (&Self) -> BufferEditRanges {
        return match self {
            .InsertText($edit) -> BufferEditRanges.One(edit.pos, edit.pos)
            .InsertLine($edit) -> BufferEditRanges.One(Position(edit.line, 0), Position(edit.line, 0))
            .DeleteText($edit) -> BufferEditRanges.One(edit.start, edit.end)
            .DeleteLine($edit) -> BufferEditRanges.One(Position(edit.line, 0), Position(edit.line, 0))
            .Group($group) -> {
                mut map := Map[int, (start: Position, end: Position)].new()

                for(reverse=true) &change in group[..] {
                    change.collect_ranges(&mut map)
                }

                BufferEditRanges.Many(map)
            }
            _ -> @assert(false)
        }
    }

    get_range :: (&Self) -> (start: Position, end: Position) {
        return match self {
            .InsertText($edit) -> edit.pos, edit.pos
            .InsertLine($edit) -> Position(edit.line, 0), Position(edit.line, 0)
            .DeleteText($edit) -> edit.start, edit.end
            .DeleteLine($edit) -> Position(edit.line, 0), Position(edit.line, 0)
            .Group($group) -> {
                @assert(group.count() > 0)
                group[0].get_range().start, group.peek_last().get_range().end
            }
            _ -> @assert(false)
        }
    }
}

Buffer :: struct {
    allocator   : Rc[ArenaAllocator]
    lines       : GapBuffer[BufferLine]
    dirty       : bool

    undo_stack  := Array[BufferEdit].new()
    undo_temp   := Array[BufferEdit].new()
    redo_stack  := Array[BufferEdit].new()

    file        := Option[String].None
    language    := Option[string].None
}

impl Buffer {
    from_file :: (path: string) -> Result[Rc[Buffer], ()] {
        text := try_with(fs.read_file(path), { return Err() })

        megs := 1 + u64(text.get_length()) / (1024 * 1024 * 10)
        arena := Rc[ArenaAllocator].new(ArenaAllocator.new(1024 * 1024 * megs))
        allocator : &mem.Allocator = arena.get()

        // assume around 15 characters per line
        mut lines := GapBuffer[BufferLine].new(text.get_length() / 15, allocator)

        for line in text.slice().lines() {
            lines.append(BufferLine.from_string(line, allocator), allocator)
        }

        if lines.count() == 0 {
            lines.append(BufferLine.empty(allocator), allocator)
        }

        return Ok(Rc[Buffer].new(Buffer(
            allocator   = arena
            lines       = lines
            dirty       = false
            file        = Some(path.to_owned())
        )))
    }

    scratch :: () -> Rc[Buffer] {
        arena := Rc[ArenaAllocator].new(ArenaAllocator.new(1024 * 1024))
        lines := GapBuffer[BufferLine].new(100, arena.get())

        lines.append(BufferLine.empty(arena.get()), arena.get())
        return Rc[Buffer].new(Buffer(
            allocator   = arena
            lines       = lines
            dirty       = true
        ))
    }

    write_to_disk :: (&Self) -> Result[(), String] {
        return match &self.file {
            None -> Err("Failed to write unnamed buffer to disc".to_owned())
            Some($path) -> {
                buffer := String.with_capacity(lines.count() * 100)
                for &line in &self.lines {
                    if it_index > 0 then buffer.append_char('`n')
                    for c in &line.characters {
                        buffer.append_char(c)
                    }
                }

                try(fs.write_file(path.slice(), buffer.slice()))
                @cast(&mut Self, self).dirty = false
                Ok()
            }
        }
    }

    get_line :: (&Self, line: int) -> Option[&BufferLine] {
        return if line >= 0 and line < self.lines.count() then Some(self.lines[line]) else None
    }

    get_text :: (&Self, start: Position, end: Position) -> String {
        if start.line == end.line {
            line := self.lines[start.line]
            mut result := String.with_capacity(end.column - start.column)
            for start.column .. end.column {
                result.append_char(*line.characters[it])
            }
            return result
        } else {
            first_line := self.lines[start.line]
            last_line := self.lines[end.line]
            mut result := String.with_capacity((first_line.characters.count() - start.column) + end.column + (end.line - start.line - 1) * 20)
            for start.column .. first_line.characters.count() {
                result.append_char(*first_line.characters[it])
            }
            result.append_char('`n')
            for it in (start.line + 1) .. end.line {
                for c in &self.lines[it].characters {
                    result.append_char(c)
                }

                result.append_char('`n')
            }
            for 0 .. end.column {
                result.append_char(*last_line.characters[it])
            }
            return result
        }
    }

    flush_changes :: (&mut Self) {
        for &change in self.undo_temp[..] {
            self.undo_stack.push(*change)
        }
        self.undo_temp.clear()
    }

    group_changes :: (&mut Self) {
        if self.undo_temp.count() == 1 {
            self.undo_stack.push(self.undo_temp.pop())
        } else if self.undo_temp.count() > 1 {
            changes := self.undo_temp <- Array[BufferEdit].new()
            self.undo_stack.push(BufferEdit.Group(changes))
        }
    }

    undo :: (&mut Self) -> BufferEditRanges {
        if undo_temp.count() == 0 and undo_stack.count() == 0 {
            return .None
        }

        edit := if self.undo_temp.count() > 0 {
            undo_temp.pop()
        } else {
            undo_stack.pop()
        }

        redo := self.edit(edit)
        ranges := redo.get_ranges()
        self.redo_stack.push(redo)
        return ranges
    }

    redo :: (&mut Self) -> BufferEditRanges {
        if redo_stack.count() == 0 {
            return .None
        }
        undo := self.edit(redo_stack.pop())
        ranges := undo.get_ranges()
        if self.undo_temp.count() > 0 {
            self.undo_temp.push(undo)
        } else {
            self.undo_stack.push(undo)
        }
        return ranges
    }

    edit :: (&mut Self, edit: BufferEdit) -> BufferEdit {
        return match edit {
            .InsertText(($id, $pos, $text)) -> {
                // io.formatln("InsertText({}, '{}')", [pos, text.slice()])
                mut line := pos.line
                mut column := pos.column

                mut rem := String.empty()
                for text.slice().lines() {
                    if it_index == 0 {
                        for ch in it {
                            self.lines[line].characters.insert(column, ch, self.allocator.get())
                            column += 1
                        }
                    } else {
                        prev_line := self.lines[line]
                        for column .. prev_line.characters.count() {
                            rem.append_char(prev_line.characters.erase(column))
                        }

                        line += 1
                        self.lines.insert(line, BufferLine.from_string(it, self.allocator.get()), self.allocator.get())
                        column = self.lines[line].characters.count()
                    }

                }

                for c in rem.slice() {
                    self.lines[line].characters.insert(column + it_index, c, self.allocator.get())
                }

                BufferEdit.DeleteText((id, pos, Position(line, column)))
            }

            .InsertLine(($id, $line, $text)) -> {
                // io.formatln("InsertLine({}, '{}')", [line, text.slice()])
                self.lines.insert(line, BufferLine.from_string(text.slice(), self.allocator.get()), self.allocator.get())
                BufferEdit.DeleteLine(id, line)
            }

            .DeleteText(($id, $start, $end)) -> {
                // io.formatln("DeleteText({}, {})", [start, end])
                deleted_text := self.get_text(start, end)

                first_line := self.lines[start.line]
                if start.line == end.line {
                    for start.column .. end.column {
                        first_line.characters.erase(start.column)
                    }
                } else {
                    for start.column .. first_line.characters.count() {
                        first_line.characters.erase(start.column)
                    }
                    for end.column .. self.lines[end.line].characters.count() {
                        ch := self.lines[end.line].characters.erase(end.column)
                        first_line.characters.insert(first_line.characters.count(), ch, self.allocator.get())
                    }
                    for it in (start.line + 1) ..= end.line {
                        self.lines.erase(start.line + 1)
                    }
                }

                if self.lines.count() == 0 {
                    self.lines.insert(0, BufferLine.empty(self.allocator.get()), self.allocator.get())
                }

                // io.formatln("deleted text: '{}'", [deleted_text.slice()])
                BufferEdit.InsertText((id, start, deleted_text))
            }

            .DeleteLine(($id, $line)) -> {
                // io.formatln("DeleteLine({})", [line])
                deleted_text := self.lines[line].get_text()
                // io.formatln("deleted text: '{}'", [deleted_text.slice()])
                lines.erase(line)

                if self.lines.count() == 0 {
                    self.lines.insert(0, BufferLine.empty(self.allocator.get()), self.allocator.get())
                    BufferEdit.InsertText((id, Position(line, 0), deleted_text))
                } else {
                    BufferEdit.InsertLine((id, line, deleted_text))
                }
            }

            .Group($group) -> {
                mut inverse := Array[BufferEdit].new(group.count())
                while group.count() > 0 {
                    inverse.push(self.edit(group.pop()))
                }
                BufferEdit.Group(inverse)
            }

            $op -> {
                io.formatln("undo(): {} not implemented", [&op])
                BufferEdit.InsertLine((0, 0, String.empty()))
            }
        }
    }

    insert_line :: (&mut Self, line: int, text: string, id: int) {
        self.lines.insert(line, BufferLine.from_string(text, self.allocator.get()), self.allocator.get())

        self.undo_temp.push(.DeleteLine(id, line))
        self.redo_stack.clear()
        self.dirty = true
    }

    append_string :: (&mut Self, line: int, text: string, id: int) {
        if line < 0 or line >= self.lines.count() {
            io.formatln("[ERROR] trying to insert at {} into buffer with {} lines", [line, self.lines.count()])
            return
        }
        self.insert_string(line, self.lines[line].characters.count(), text, id)
    }

    insert_string :: (&mut Self, line: int, column: int, text: string, id: int) -> (start: Position, end: Position) {
        if line < 0 or line >= self.lines.count() {
            io.formatln("[ERROR] trying to insert at {}:{} into buffer with {} lines", [line, column, self.lines.count()])
            return (Position(line, column), Position(line, column))
        }

        undo := self.edit(BufferEdit.InsertText(id, Position(line, column), text.to_owned()))
        range := undo.get_range()
        self.undo_temp.push(undo)
        self.redo_stack.clear()
        self.dirty = true
        return range
    }

    insert_char :: (&mut Self, line: int, column: int, ch: char, id: int) {
        if line < 0 or line >= self.lines.count() {
            io.formatln("[ERROR] trying to insert at {}:{} into buffer with {} lines", [line, column, self.lines.count()])
            return
        }

        self.undo_temp.push(self.edit(BufferEdit.InsertText(id, Position(line, column), String.from_char(ch))))
        self.redo_stack.clear()
        self.dirty = true
    }

    erase_line :: (&mut Self, line: int, id: int) {
        if line < 0 or line >= self.lines.count() {
            io.formatln("[ERROR] trying to erase line {} in buffer with {} lines", [line, self.lines.count()])
            return
        }

        text := self.lines[line].get_text()
        self.lines.erase(line)
        if self.lines.count() == 0 {
            self.lines.insert(0, BufferLine.empty(self.allocator.get()), self.allocator.get())
        }

        self.undo_temp.push(.InsertLine(id, line, text))
        self.redo_stack.clear()
        self.dirty = true
    }

    erase_range :: (&mut Self, start: Position, end: Position, id: int) {
        self.undo_temp.push(self.edit(BufferEdit.DeleteText(id, start, end)))
        self.redo_stack.clear()
        self.dirty = true
    }

    erase_char :: (&mut Self, line: int, column: int, id: int) {
        if line < 0 or line >= self.lines.count() {
            io.formatln("[ERROR] trying to erase char at {}:{} in buffer with {} lines", [line, column, self.lines.count()])
            return
        }

        buffer_line := self.lines[line]
        text := String.from_char(buffer_line.characters.erase(column))

        self.undo_temp.push(.InsertText(id, Position(line, column), text))
        self.redo_stack.clear()
        self.dirty = true
    }
}