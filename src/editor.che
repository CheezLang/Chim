use import std.rc
use import std.box
use import std.array
use import std.string
use import std.mem.arena_allocator

mem :: import std.mem.allocator
io :: import std.io
fs :: import std.io.fs

use import gap_buffer

#export_scope

Position :: struct #copy {
    line    : int = 0
    column  : int = 0
}

impl Position {
    less :: (Self, other: Position) -> bool #operator("<") {
        return self.line < other.line or (self.line == other.line and self.column < other.column)
    }

    less_equal :: (Self, other: Position) -> bool #operator("<=") {
        return self.line < other.line or (self.line == other.line and self.column <= other.column)
    }

    equal :: (Self, other: Position) -> bool #operator("==") {
        return self.line == other.line and self.column == other.column
    }

    greater :: (Self, other: Position) -> bool #operator(">") {
        return self.line > other.line or (self.line == other.line and self.column > other.column)
    }

    greater_equal :: (Self, other: Position) -> bool #operator(">=") {
        return self.line > other.line or (self.line == other.line and self.column >= other.column)
    }
}

BufferLine :: struct {
    characters : GapBuffer[char]
}

impl BufferLine {
    empty :: (allocator: &mem.Allocator) -> BufferLine {
        return BufferLine(
            characters = GapBuffer[char].new(128, allocator)
        )
    }

    from_string :: (text: string, allocator: &mem.Allocator) -> BufferLine {
        chars := GapBuffer[char].new(text.bytes.length, allocator)
        for c in text {
            chars.append(c, allocator)
        }
        return BufferLine(
            characters = chars
        )
    }

    get_text :: (&Self) -> String {
        text := String.with_capacity(self.characters.count())
        for c in &self.characters {
            text.append_char(c)
        }
        return text
    }

    get_text_from :: (&Self, index: int) -> String {
        @assert(index <= self.characters.count())
        text := String.with_capacity(self.characters.count() - index)
        for c in &self.characters {
            if it_index < index then continue
            text.append_char(c)
        }
        return text
    }

    erase_from :: (&Self, index: int) {
        @assert(index <= self.characters.count())

        self.characters.move_gap(self.characters.count())
        while self.characters.count() > index {
            self.characters.truncate()
        }
    }
}

BufferEdit :: enum {
    InsertText  : (pos: Position, text: String)
    DeleteText  : (start: Position, end: Position)
    InsertLine  : (line: int, text: String)
    DeleteLine  : int
    Group       : Array[BufferEdit]
}

impl BufferEdit {
    get_range :: (&Self) -> (start: Position, end: Position) {
        return match self {
            .InsertText($edit) -> edit.pos, edit.pos
            .InsertLine($edit) -> Position(edit.line, 0), Position(edit.line, 0)
            .DeleteText($edit) -> edit.start, edit.end
            .DeleteLine($line) -> Position(*line, 0), Position(*line, 0)
            .Group($group) -> {
                @assert(group.count() > 0)
                group[0].get_range().start, group.peek_last().get_range().end
            }
            _ -> @assert(false)
        }
    }
}

Buffer :: struct {
    allocator   : Rc[ArenaAllocator]
    file        : Option[String]
    lines       : GapBuffer[BufferLine]
    dirty       : bool

    undo_stack  : Array[BufferEdit]
    undo_temp   : Array[BufferEdit]
    redo_stack  : Array[BufferEdit]
}

impl Buffer {
    from_file :: (path: string) -> Result[Rc[Buffer], ()] {
        text := try_with(fs.read_file(path), { return Err() })

        megs := 1 + u64(text.get_length()) / (1024 * 1024 * 10)
        arena := Rc[ArenaAllocator].new(ArenaAllocator.new(1024 * 1024 * megs))
        allocator : &mem.Allocator = arena.get()

        // assume around 15 characters per line
        mut lines := GapBuffer[BufferLine].new(text.get_length() / 15, allocator)

        for line in text.slice().lines() {
            lines.append(BufferLine.from_string(line, allocator), allocator)
        }

        if lines.count() == 0 {
            lines.append(BufferLine.empty(allocator), allocator)
        }

        return Ok(Rc[Buffer].new(Buffer(
            allocator   = arena
            file        = Some(path.to_owned())
            lines       = lines
            dirty       = false
            undo_stack  = Array[BufferEdit].new()
            undo_temp   = Array[BufferEdit].new()
            redo_stack  = Array[BufferEdit].new()
        )))
    }

    scratch :: () -> Rc[Buffer] {
        arena := Rc[ArenaAllocator].new(ArenaAllocator.new(1024 * 1024))
        lines := GapBuffer[BufferLine].new(100, arena.get())

        lines.append(BufferLine.empty(arena.get()), arena.get())
        return Rc[Buffer].new(Buffer(
            allocator   = arena
            file        = .None
            lines       = lines
            dirty       = true
            undo_stack  = Array[BufferEdit].new()
            undo_temp   = Array[BufferEdit].new()
            redo_stack  = Array[BufferEdit].new()
        ))
    }

    write_to_disk :: (&Self) -> Result[(), String] {
        return match &self.file {
            None -> Err("Failed to write unnamed buffer to disc".to_owned())
            Some($path) -> {
                buffer := String.with_capacity(lines.count() * 100)
                for &line in &self.lines {
                    if it_index > 0 then buffer.append_char('`n')
                    for c in &line.characters {
                        buffer.append_char(c)
                    }
                }

                try(fs.write_file(path.slice(), buffer.slice()))
                @cast(&mut Self, self).dirty = false
                Ok()
            }
        }
    }

    get_line :: (&Self, line: int) -> Option[&BufferLine] {
        return if line >= 0 and line < self.lines.count() then Some(self.lines[line]) else None
    }

    get_text :: (&Self, start: Position, end: Position) -> String {
        if start.line == end.line {
            line := self.lines[start.line]
            mut result := String.with_capacity(end.column - start.column)
            for start.column .. end.column {
                result.append_char(*line.characters[it])
            }
            return result
        } else {
            first_line := self.lines[start.line]
            last_line := self.lines[end.line]
            mut result := String.with_capacity((first_line.characters.count() - start.column) + end.column + (end.line - start.line - 1) * 20)
            for start.column .. first_line.characters.count() {
                result.append_char(*first_line.characters[it])
            }
            result.append_char('`n')
            for it in (start.line + 1) .. end.line {
                for c in &self.lines[it].characters {
                    result.append_char(c)
                }

                result.append_char('`n')
            }
            for 0 .. end.column {
                result.append_char(*last_line.characters[it])
            }
            return result
        }
    }

    group_changes :: (&mut Self) {
        if self.undo_temp.count() == 1 {
            self.undo_stack.push(self.undo_temp.pop())
        } else if self.undo_temp.count() > 1 {
            changes := self.undo_temp <- Array[BufferEdit].new()
            self.undo_stack.push(BufferEdit.Group(changes))
        }
    }

    undo :: (&mut Self) -> Option[(start: Position, end: Position)] {
        if undo_temp.count() == 0 and undo_stack.count() == 0 {
            return None
        }

        edit := if self.undo_temp.count() > 0 {
            undo_temp.pop()
        } else {
            undo_stack.pop()
        }

        redo := self.edit(edit)
        start, end := redo.get_range()
        self.redo_stack.push(redo)
        return Some(start, end)
    }

    redo :: (&mut Self) -> Option[(start: Position, end: Position)] {
        if redo_stack.count() == 0 {
            return None
        }
        undo := self.edit(redo_stack.pop())
        start, end := undo.get_range()
        if self.undo_temp.count() > 0 {
            self.undo_temp.push(undo)
        } else {
            self.undo_stack.push(undo)
        }
        return Some(start, end)
    }

    edit :: (&mut Self, edit: BufferEdit) -> BufferEdit {
        return match edit {
            .InsertText(($pos, $text)) -> {
                // io.formatln("InsertText({}, '{}')", [pos, text.slice()])
                mut line := pos.line
                mut column := pos.column

                mut rem := String.empty()
                for text.slice().lines() {
                    if it_index == 0 {
                        for ch in it {
                            self.lines[line].characters.insert(column, ch, self.allocator.get())
                            column += 1
                        }
                    } else {
                        prev_line := self.lines[line]
                        for column .. prev_line.characters.count() {
                            rem.append_char(prev_line.characters.erase(column))
                        }

                        line += 1
                        self.lines.insert(line, BufferLine.from_string(it, self.allocator.get()), self.allocator.get())
                        column = self.lines[line].characters.count()
                    }

                    for c in rem.slice() {
                        self.lines[line].characters.insert(column + it_index, c, self.allocator.get())
                    }
                }

                BufferEdit.DeleteText((pos, Position(line, column)))
            }

            .InsertLine(($line, $text)) -> {
                // io.formatln("InsertLine({}, '{}')", [line, text.slice()])
                self.lines.insert(line, BufferLine.from_string(text.slice(), self.allocator.get()), self.allocator.get())
                BufferEdit.DeleteLine(line)
            }

            .DeleteText(($start, $end)) -> {
                // io.formatln("DeleteText({}, {})", [start, end])
                deleted_text := self.get_text(start, end)

                first_line := self.lines[start.line]
                if start.line == end.line {
                    for start.column .. end.column {
                        first_line.characters.erase(start.column)
                    }
                } else {
                    for start.column .. first_line.characters.count() {
                        first_line.characters.erase(start.column)
                    }
                    for end.column .. self.lines[end.line].characters.count() {
                        ch := self.lines[end.line].characters.erase(end.column)
                        first_line.characters.insert(first_line.characters.count(), ch, self.allocator.get())
                    }
                    for it in (start.line + 1) ..= end.line {
                        self.lines.erase(start.line + 1)
                    }
                }

                // io.formatln("deleted text: '{}'", [deleted_text.slice()])
                BufferEdit.InsertText((start, deleted_text))
            }

            .DeleteLine($line) -> {
                // io.formatln("DeleteLine({})", [line])
                deleted_text := self.lines[line].get_text()
                lines.erase(line)
                // io.formatln("deleted text: '{}'", [deleted_text.slice()])
                BufferEdit.InsertLine((line, deleted_text))
            }

            .Group($group) -> {
                mut inverse := Array[BufferEdit].new(group.count())
                while group.count() > 0 {
                    inverse.push(self.edit(group.pop()))
                }
                BufferEdit.Group(inverse)
            }

            $op -> {
                io.formatln("undo(): {} not implemented", [&op])
                BufferEdit.InsertLine((0, String.empty()))
            }
        }
    }

    insert_line :: (&mut Self, line: int, text: string) {
        self.lines.insert(line, BufferLine.from_string(text, self.allocator.get()), self.allocator.get())

        self.undo_temp.push(.DeleteLine(line))
        self.redo_stack.clear()
        self.dirty = true
    }

    append_string :: (&mut Self, line: int, text: string) {
        if line < 0 or line >= self.lines.count() {
            io.formatln("[ERROR] trying to insert at {} into buffer with {} lines", [line, self.lines.count()])
            return
        }
        self.insert_string(line, self.lines[line].characters.count(), text)
    }

    insert_string :: (&mut Self, line: int, column: int, text: string) {
        if line < 0 or line >= self.lines.count() {
            io.formatln("[ERROR] trying to insert at {}:{} into buffer with {} lines", [line, column, self.lines.count()])
            return
        }

        undo := self.edit(BufferEdit.InsertText(Position(line, column), text.to_owned()))
        self.undo_temp.push(undo)
        self.redo_stack.clear()
        self.dirty = true
    }

    insert_char :: (&mut Self, line: int, column: int, ch: char) {
        if line < 0 or line >= self.lines.count() {
            io.formatln("[ERROR] trying to insert at {}:{} into buffer with {} lines", [line, column, self.lines.count()])
            return
        }

        self.undo_temp.push(self.edit(BufferEdit.InsertText(Position(line, column), String.from_char(ch))))
        self.redo_stack.clear()
        self.dirty = true
    }

    erase_line :: (&mut Self, line: int) {
        if line < 0 or line >= self.lines.count() {
            io.formatln("[ERROR] trying to erase line {} in buffer with {} lines", [line, self.lines.count()])
            return
        }

        text := self.lines[line].get_text()
        self.lines.erase(line)
        if self.lines.count() == 0 {
            self.lines.insert(0, BufferLine.empty(self.allocator.get()), self.allocator.get())
        }

        self.undo_temp.push(.InsertLine(line, text))
        self.redo_stack.clear()
        self.dirty = true
    }

    erase_range :: (&mut Self, start: Position, end: Position) {
        self.undo_temp.push(self.edit(BufferEdit.DeleteText(start, end)))
        self.redo_stack.clear()
        self.dirty = true
    }

    erase_char :: (&mut Self, line: int, column: int) {
        if line < 0 or line >= self.lines.count() {
            io.formatln("[ERROR] trying to erase char at {}:{} in buffer with {} lines", [line, column, self.lines.count()])
            return
        }

        buffer_line := self.lines[line]
        text := String.from_char(buffer_line.characters.erase(column))

        self.undo_temp.push(.InsertText(Position(line, column), text))
        self.redo_stack.clear()
        self.dirty = true
    }
}

LineNumberMode :: enum #tag_type(i32) #repr("C") #copy {
    None
    Absolute
    RelativeCursor
    RelativeTop
}

Cursor :: struct #copy {
    start   : Position
    end     : Position
}

impl Cursor {
    at :: (pos: Position) -> Cursor {
        return Cursor(pos, pos)
    }

    range :: (start: Position, end: Position) -> Cursor {
        return Cursor(start, end)
    }

    low :: (&Self) -> Position {
        return if start <= end then start else end
    }

    high :: (&Self) -> Position {
        return if start >= end then start else end
    }

    less :: (&Self, other: &Cursor) -> bool #operator("<") {
        return self.low() < other.low()
    }

    less_equal :: (&Self, other: &Cursor) -> bool #operator("<=") {
        return self.low() <= other.low()
    }

    equal :: (&Self, other: &Cursor) -> bool #operator("==") {
        return self.low() == other.low()
    }

    greater :: (&Self, other: &Cursor) -> bool #operator(">") {
        return self.low() > other.low()
    }

    greater_equal :: (&Self, other: &Cursor) -> bool #operator(">=") {
        return self.low() >= other.low()
    }
}

View :: struct {
    buffer      : Rc[Buffer]

    top_line    : int = 0

    cursor      := Position()
    cursors     := Array[Cursor].new()

    line_number_mode    := Option[LineNumberMode].None
    wrapping_enabled    := Option[bool].None
    highlight_curr_line := Option[bool].None
    show_whitespace     := Option[bool].None
    tab_width           := Option[int].None
    cursor_margin       := Option[int].None
}

impl View {
    new :: (buffer: Rc[Buffer]) -> Rc[View] {
        return Rc[View].new(View(buffer))
    }

    scroll_to_cursor :: (&mut Self, cols: int, rows: int, margin: int) {
        if self.cursor.line - self.top_line >= rows - margin - 1 {
            self.top_line = self.cursor.line - rows + margin + 1
        } else if self.cursor.line - self.top_line < margin {
            self.top_line = self.cursor.line - margin
        }
        if self.top_line < 0 {
            self.top_line = 0
        }
    }

    add_cursor_below :: (&mut Self) {
        last_cursor := if cursors.count() == 0 then cursor else cursors.peek_last().start
        if last_cursor.line < buffer.get().lines.count() + 1 {
            cursors.add(Cursor.at(Position(last_cursor.line + 1, last_cursor.column)))
        }
    }

    undo :: (&mut Self) {
        match self.buffer.get_mut().undo() {
            Some($range) -> {
                self.cursor = range.end
            }
            None -> {}
        }
    }

    redo :: (&mut Self) {
        match self.buffer.get_mut().redo() {
            Some($range) -> {
                self.cursor = range.end
            }
            None -> {}
        }
    }

    insert_char :: (&mut Self, text: char) {
        self.cursor = self.clamp_or_wrap_position(self.cursor, wrap=false)
        self.buffer.get_mut().insert_char(cursor.line, cursor.column, text)
        if text == '`n' {
            self.cursor.line += 1
            self.cursor.column = 0
        } else {
            self.cursor.column += 1
        }
        self.cursor = self.clamp_or_wrap_position(self.cursor, wrap=true)
    }

    delete_line :: (&mut Self) {
        self.cursor = self.clamp_or_wrap_position(self.cursor, wrap=false)
        self.buffer.get_mut().erase_line(self.cursor.line)
        self.cursor.column = 0
        self.cursor = self.clamp_or_wrap_position(self.cursor, wrap=true)
    }

    delete_at_cursor :: (&mut Self) {
        self.cursor = self.clamp_or_wrap_position(self.cursor, wrap=false)
        if self.cursor.column == 0 {
            if self.cursor.line > 0 {
                self.cursor.line -= 1
                self.cursor.column = self.buffer.get().lines[self.cursor.line].characters.count()
                self.buffer.get_mut().erase_range(Position(self.cursor.line, self.cursor.column), Position(self.cursor.line + 1, 0))
            } else {
                // no point in doing anything
            }
        } else {
            self.cursor.column -= 1
            self.buffer.get_mut().erase_char(self.cursor.line, self.cursor.column)
        }
        self.cursor = self.clamp_or_wrap_position(self.cursor, wrap=true)
    }

    move_cursor_beginning :: (&mut Self) {
        self.cursor.line = 0
        self.cursor.column = 0
    }

    move_cursor_end :: (&mut Self) {
        self.cursor.line = self.buffer.get().lines.count() - 1
        self.cursor.column = self.buffer.get().lines[self.cursor.line].characters.count()
    }

    move_cursor_column_beginning :: (&mut Self) {
        self.cursor = self.clamp_or_wrap_position(self.cursor, wrap=false)
        self.cursor.column = 0
    }

    move_cursor_column_end :: (&mut Self) {
        self.cursor = self.clamp_or_wrap_position(self.cursor, wrap=false)
        self.cursor.column = self.buffer.get().lines[self.cursor.line].characters.count()
    }

    move_cursor_column :: (&mut Self, columns: int) {
        self.cursor.column += columns
        self.cursor = self.clamp_or_wrap_position(self.cursor, wrap=true)
    }

    move_cursor_line :: (&mut Self, lines: int) {
        cursor.line += lines
        self.cursor = self.clamp_or_wrap_position(self.cursor, wrap=false)
    }

    set_cursor_line :: (&mut Self, line: int) {
        cursor.line = line
        self.cursor = self.clamp_or_wrap_position(self.cursor, wrap=false)
    }

    clamp_or_wrap_cursor_position :: (&mut Self, wrap: bool) {
        self.cursor = self.clamp_or_wrap_position(self.cursor, wrap)
    }

    clamp_or_wrap_position :: (&Self, position: Position, wrap: bool) -> Position {
        buffer := self.buffer.get()
        if buffer.lines.count() == 0 {
            return Position(0, 0)
        } else if position.line < 0 {
            line := buffer.lines[0]
            if position.column < 0 {
                return Position(0, 0)
            } else if position.column > line.characters.count() {
                return Position(0, line.characters.count())
            } else {
                return Position(0, position.column)
            }
        } else if position.line >= buffer.lines.count() {
            line := buffer.lines[position.line - 1]
            if position.column < 0 {
                return Position(buffer.lines.count() - 1, 0)
            } else if position.column > line.characters.count() {
                return Position(buffer.lines.count() - 1, line.characters.count())
            } else {
                return Position(buffer.lines.count() - 1, position.column)
            }
        } else {
            // line is in range, wrap column
            line := buffer.lines[position.line]

            if wrap {
                if position.column < 0 {
                    if position.line > 0 {
                        return self.clamp_or_wrap_position(Position(
                            line    = position.line - 1
                            column  = position.column + buffer.lines[position.line - 1].characters.count() + 1
                        ), wrap)
                    } else {
                        return Position(position.line, 0)
                    }
                } else if position.column > line.characters.count() {
                    if position.line < buffer.lines.count() - 1 {
                        return self.clamp_or_wrap_position(Position(
                            line    =  position.line + 1
                            column  = position.column - line.characters.count() - 1
                        ), wrap)
                    } else {
                        return Position(position.line, line.characters.count())
                    }
                } else {
                    return position
                }
            } else {
                if position.column < 0 {
                    return Position(position.line, 0)
                } else if position.column > line.characters.count() {
                    return Position(position.line, line.characters.count())
                } else {
                    return position
                }
            }
        }
    }
}

Split :: enum {
    None        : Rc[View]
    Vertical    : Array[Rc[Split]]
    Horizontal  : Array[Rc[Split]]
}

Tab :: struct {
    split : Rc[Split]
}

impl Tab {
    new :: (view: Rc[View]) -> Rc[Tab] {
        return Rc[Tab].new(Tab(
            split = Rc[Split].new(Split.None(view))
        ))
    }

    get_active_view :: (&Self) -> Rc[View] {
        return match self.split.get() {
            .None($view) -> view.clone()
            _ -> @assert(false)
        }
    }
}