use import std.rc
use import std.box
use import std.array
use import std.map
use import std.string
use import std.mem.arena_allocator

mem :: import std.mem.allocator
io :: import std.io
fs :: import std.io.fs

use import gap_buffer
use import buffer

#export_scope

Position :: struct #copy {
    line    : int = 0
    column  : int = 0
}

impl Position {
    less :: (Self, other: Position) -> bool #operator("<") {
        return self.line < other.line or (self.line == other.line and self.column < other.column)
    }

    less_equal :: (Self, other: Position) -> bool #operator("<=") {
        return self.line < other.line or (self.line == other.line and self.column <= other.column)
    }

    equal :: (Self, other: Position) -> bool #operator("==") {
        return self.line == other.line and self.column == other.column
    }

    greater :: (Self, other: Position) -> bool #operator(">") {
        return self.line > other.line or (self.line == other.line and self.column > other.column)
    }

    greater_equal :: (Self, other: Position) -> bool #operator(">=") {
        return self.line > other.line or (self.line == other.line and self.column >= other.column)
    }
}


LineNumberMode :: enum #tag_type(i32) #repr("C") #copy {
    None
    Absolute
    RelativeCursor
    RelativeTop
}

Cursor :: struct #copy {
    start   : Position
    end     : Position
}

impl Cursor {
    at :: (pos: Position) -> Cursor {
        return Cursor(pos, pos)
    }

    range :: (start: Position, end: Position) -> Cursor {
        return Cursor(start, end)
    }

    empty :: (&Self) -> bool {
        return start.line == end.line and start.column == end.column
    }

    low :: (&Self) -> Position {
        return if start <= end then start else end
    }

    high :: (&Self) -> Position {
        return if start >= end then start else end
    }

    less :: (&Self, other: &Cursor) -> bool #operator("<") {
        return self.low() < other.low()
    }

    less_equal :: (&Self, other: &Cursor) -> bool #operator("<=") {
        return self.low() <= other.low()
    }

    equal :: (&Self, other: &Cursor) -> bool #operator("==") {
        return self.low() == other.low()
    }

    greater :: (&Self, other: &Cursor) -> bool #operator(">") {
        return self.low() > other.low()
    }

    greater_equal :: (&Self, other: &Cursor) -> bool #operator(">=") {
        return self.low() >= other.low()
    }
}

View :: struct {
    buffer              : Rc[Buffer]
    cursors             : Array[Cursor]

    top_line            : int = 0
    active_cursor       := 0

    preferred_size      : (width: int, height: int) = 0, 0

    line_number_mode    := Option[LineNumberMode].None
    wrapping_enabled    := Option[bool].None
    highlight_curr_line := Option[bool].None
    show_whitespace     := Option[bool].None
    tab_width           := Option[int].None
    cursor_margin       := Option[int].None
}

impl View {
    new :: (buffer: Rc[Buffer]) -> Rc[View] {
        mut cursors := Array[Cursor].new()
        cursors.add(Cursor.at(Position()))
        return Rc[View].new(View(buffer, cursors))
    }

    scroll_to_cursor :: (&mut Self, cols: int, rows: int, margin: int) {
        self.update_cursors()

        cursor := self.get_active_cursor()
        if cursor.start.line - self.top_line >= rows - margin - 1 {
            self.top_line = cursor.start.line - rows + margin + 1
        } else if cursor.start.line - self.top_line < margin {
            self.top_line = cursor.start.line - margin
        }
        if self.top_line < 0 {
            self.top_line = 0
        }
    }

    sort_cursors :: (&mut Self) {
        self.cursors.sort((a, b) => if a == b then 0 else if a < b then 1 else -1)
    }

    update_cursors :: (&mut Self) {
        for &mut c in self.cursors.slice_mut() {
            c.start = self.clamp_or_wrap_position(c.start, false)
            c.end = self.clamp_or_wrap_position(c.end, false)
        }
        self.merge_cursors()
    }

    clear_cursors :: (&mut Self) {
        mut cursor := self.get_active_cursor()
        self.cursors.clear()
        self.cursors.add(cursor)
        self.active_cursor = 0
    }

    merge_cursors :: (&mut Self) {
        if self.cursors.count() > 1 {
            self.sort_cursors()

            for {0 .. self.cursors.count() - 1}.reverse() {
                this := self.cursors[it]
                next := self.cursors[it + 1]
                if this.empty() and this.end == next.start {
                    self.cursors.remove_at(it)
                } else if next.empty() and this.end == next.start {
                    self.cursors.remove_at(it + 1)
                } else if self.cursors[it].end > self.cursors[it + 1].start {
                    self.cursors[it].end = self.cursors[it + 1].end
                    self.cursors.remove_at(it + 1)
                }
            }
        }
        self.active_cursor = self.active_cursor.clamp(0, self.cursors.count() - 1)
    }

    get_active_cursor :: (&Self) -> Cursor {
        if self.active_cursor >= self.cursors.count() {
            io.formatln("{}/{}", [self.active_cursor, self.cursors.count()])
        }
        return *self.cursors[self.active_cursor]
    }

    add_cursor_below :: (&mut Self) {
        self.update_cursors()
        last_cursor := self.cursors.peek_last().start
        if last_cursor.line < buffer.get().lines.count() - 1 {
            self.cursors.add(Cursor.at(Position(last_cursor.line + 1, last_cursor.column)))
        }
        self.active_cursor = self.cursors.count() - 1
    }

    undo :: (&mut Self) {
        match self.buffer.get_mut().undo() {
            .None -> {}
            .One($range) -> {
                self.clear_cursors()
                self.cursors[0].start = range.start
                self.cursors[0].end = range.end
            }
            .Many($ranges) -> {
                self.cursors.clear()
                for range in &ranges {
                    self.cursors.add(Cursor(range.value.start, range.value.end))
                }
                self.active_cursor = 0
                self.update_cursors()
            }
        }
    }

    redo :: (&mut Self) {
        match self.buffer.get_mut().redo() {
            .None -> {}
            .One($range) -> {
                self.clear_cursors()
                self.cursors[0].start = range.end
                self.cursors[0].end = range.end
            }
            .Many($ranges) -> {
                self.cursors.clear()
                for range in &ranges {
                    self.cursors.add(Cursor(range.value.start, range.value.end))
                }
                self.active_cursor = 0
                self.update_cursors()
            }
        }
    }

    get_selected_text :: (&Self) -> String {
        mut result := String.empty()

        for &c in self.cursors[..] {
            if it_index > 0 then result.append_char('`n')
            text := self.buffer.get().get_text(c.low(), c.high())
            result.append(&text)
        }

        return result
    }

    insert_string :: (&mut Self, text: string) {
        self.buffer.get_mut().flush_changes()
        self.update_cursors()

        mut lines := text.lines().collect()

        lines_per_cursor := if lines.count() % self.cursors.count() == 0 {
            lines.count() / self.cursors.count()
        } else {
            lines.count()
        }

        mut last_line := -1
        mut lines_added := 0
        mut columns_deleted := 0
        for &mut c in self.cursors.slice_mut() {
            text := if lines_per_cursor == lines.count() then text else {
                first_line_index := it_index * lines_per_cursor
                last_line_index  := (it_index + 1) * lines_per_cursor - 1
                begin := int(lines[first_line_index].bytes.data) - int(text.bytes.data)
                end   := int(lines[last_line_index].bytes.data) - int(text.bytes.data) + lines[last_line_index].bytes.length
                text[begin .. end]
            }

            if c.empty() {
                c.start.line += lines_added
                if c.start.line == last_line {
                    c.start.column -= columns_deleted
                } else {
                    columns_deleted = 0
                }
                range := self.buffer.get_mut().insert_string(c.start.line, c.start.column, text, it_index)

                c.start = range.end
                lines_added += range.end.line - range.start.line
            } else {
                mut low  := c.low()
                mut high := c.high()

                low.line += lines_added
                high.line += lines_added
                if low.line == high.line {
                    if low.line == last_line {
                        low.column -= columns_deleted
                        high.column -= columns_deleted
                    } else {
                        columns_deleted = 0
                    }
                } else {
                    if low.line == last_line {
                        low.column -= columns_deleted
                    }
                    columns_deleted = 0
                }
                last_line = low.line
                lines_added -= high.line - low.line
                columns_deleted += high.column - low.column

                self.buffer.get_mut().erase_range(low, high, it_index)
                range := self.buffer.get_mut().insert_string(low.line, low.column, text, it_index)

                c.start = range.end
                lines_added += range.end.line - range.start.line
            }

            c.end = c.start
        }

        self.merge_cursors()

        self.buffer.get_mut().group_changes()
    }

    insert_char :: (&mut Self, text: char) {
        self.buffer.get_mut().flush_changes()
        self.update_cursors()

        mut last_line := -1
        mut lines_deleted := 0
        mut columns_deleted := 0
        for &mut c in self.cursors.slice_mut() {
            if c.empty() {
                c.start.line -= lines_deleted
                if c.start.line == last_line {
                    c.start.column -= columns_deleted
                } else {
                    columns_deleted = 0
                }

                self.buffer.get_mut().insert_char(c.start.line, c.start.column, text, it_index)
                if text == '`n' {
                    c.start.line += 1
                    c.start.column = 0
                    lines_deleted -= 1
                } else {
                    c.start.column += 1
                }
            } else {
                mut low  := c.low()
                mut high := c.high()

                low.line -= lines_deleted
                high.line -= lines_deleted
                if low.line == high.line {
                    if low.line == last_line {
                        low.column -= columns_deleted
                        high.column -= columns_deleted
                    } else {
                        columns_deleted = 0
                    }
                } else {
                    if low.line == last_line {
                        low.column -= columns_deleted
                    }
                    columns_deleted = 0
                }
                last_line = low.line
                lines_deleted += high.line - low.line
                columns_deleted += high.column - low.column

                self.buffer.get_mut().erase_range(low, high, it_index)
                self.buffer.get_mut().insert_char(low.line, low.column, text, it_index)

                c.start = low

                if text == '`n' {
                    c.start.line += 1
                    c.start.column = 0
                    lines_deleted -= 1
                } else {
                    c.start.column += 1
                }
            }

            c.end = c.start
        }

        self.merge_cursors()

        self.buffer.get_mut().group_changes()
    }

    delete_line :: (&mut Self) {
        self.buffer.get_mut().flush_changes()
        self.update_cursors()

        mut last_line       := -1
        mut lines_deleted   := 0
        for &mut c in self.cursors.slice_mut() {
            mut low  := c.low()
            mut high := c.high()

            low.line -= lines_deleted
            high.line -= lines_deleted

            if low.line < last_line {
                if low.line == high.line {

                } else {
                    for {low.line + 1} ..= high.line {
                        self.buffer.get_mut().erase_line(low.line, it_index)
                        lines_deleted += 1
                    }
                }
            } else {
                for low.line ..= high.line {
                    self.buffer.get_mut().erase_line(low.line, it_index)
                    lines_deleted += 1
                }
            }

            last_line = low.line
            c.start = low
            c.end   = low
        }
        self.update_cursors()

        self.buffer.get_mut().group_changes()
    }

    delete_at_cursor :: (&mut Self) {
        self.buffer.get_mut().flush_changes()
        self.update_cursors()

        mut last_line := -1
        mut lines_deleted := 0
        mut columns_deleted := 0
        for &mut c in self.cursors.slice_mut() {
            if c.empty() {
                c.start.line -= lines_deleted
                if c.start.line == last_line {
                    c.start.column -= columns_deleted
                } else {
                    columns_deleted = 0
                }

                if c.start.column == 0 {
                    if c.start.line > 0 {
                        c.start.line -= 1
                        c.start.column = self.buffer.get().lines[c.start.line].characters.count()
                        self.buffer.get_mut().erase_range(Position(c.start.line, c.start.column), Position(c.start.line + 1, 0), it_index)
                        lines_deleted += 1

                        last_line = c.start.line
                    } else {
                        // no point in doing anything
                    }
                } else {
                    c.start.column -= 1
                    self.buffer.get_mut().erase_char(c.start.line, c.start.column, it_index)

                    columns_deleted += 1
                    last_line = c.start.line
                }

                c.end = c.start
            } else {
                mut low  := c.low()
                mut high := c.high()

                low.line -= lines_deleted
                high.line -= lines_deleted
                if low.line == high.line {
                    if low.line == last_line {
                        low.column -= columns_deleted
                        high.column -= columns_deleted
                    } else {
                        columns_deleted = 0
                    }
                } else {
                    if low.line == last_line {
                        low.column -= columns_deleted
                    }
                    columns_deleted = 0
                }
                last_line = low.line
                lines_deleted += high.line - low.line
                columns_deleted += high.column - low.column

                self.buffer.get_mut().erase_range(low, high, it_index)

                c.start = low
                c.end   = low
            }
        }
        self.merge_cursors()

        self.buffer.get_mut().group_changes()
    }

    move_cursor_beginning :: (&mut Self, select: bool = false) {
        mut cursor := *self.cursors[0]
        self.cursors.clear()
        cursor.start.line = 0
        cursor.start.column = 0
        if !select {
            cursor.end = cursor.start
        }
        self.cursors.add(cursor)
        self.active_cursor = 0
    }

    move_cursor_end :: (&mut Self, select: bool = false) {
        mut cursor := *self.cursors[0]
        self.cursors.clear()
        cursor.start.line = self.buffer.get().lines.count() - 1
        cursor.start.column = self.buffer.get().lines[cursor.start.line].characters.count()
        if !select {
            cursor.end = cursor.start
        }
        self.cursors.add(cursor)
        self.active_cursor = 0
    }

    move_cursor_column_beginning :: (&mut Self, select: bool = false) {
        for &mut c in self.cursors.slice_mut() {
            c.start = self.clamp_or_wrap_position(c.start, false)
            c.end = self.clamp_or_wrap_position(c.end, false)
            c.start.column = 0
            if !select {
                c.end = c.start
            }
        }
        self.update_cursors()
    }

    move_cursor_column_end :: (&mut Self, select: bool = false) {
        for &mut c in self.cursors.slice_mut() {
            c.start = self.clamp_or_wrap_position(c.start, false)
            c.end = self.clamp_or_wrap_position(c.end, false)
            line := self.buffer.get().lines[c.start.line]
            c.start.column = line.characters.count()
            if !select {
                c.end = c.start
            }
        }
        self.update_cursors()
    }

    move_cursor_column :: (&mut Self, columns: int, select: bool = false) {
        for &mut c in self.cursors.slice_mut() {
            c.start = self.clamp_or_wrap_position(Position(c.start.line, c.start.column + columns), true)
            if !select {
                c.end = c.start
            }
        }
        self.update_cursors()
    }

    move_cursor_line :: (&mut Self, lines: int, select: bool = false) {
        for &mut c in self.cursors.slice_mut() {
            c.start = self.clamp_or_wrap_position(Position(c.start.line + lines, c.start.column), false)
            if !select {
                c.end = c.start
            }
        }
        self.update_cursors()
    }

    set_cursor_line :: (&mut Self, line: int) {
        self.clear_cursors()
        self.cursors[0].start.line = line
        self.cursors[0].end = self.cursors[0].start
        self.update_cursors()
    }

    clamp_or_wrap_position :: (&Self, position: Position, wrap: bool) -> Position {
        buffer := self.buffer.get()
        if buffer.lines.count() == 0 {
            return Position(0, 0)
        } else if position.line < 0 {
            line := buffer.lines[0]
            if position.column < 0 {
                return Position(0, 0)
            } else if position.column > line.characters.count() {
                return Position(0, line.characters.count())
            } else {
                return Position(0, position.column)
            }
        } else if position.line >= buffer.lines.count() {
            line := buffer.lines[buffer.lines.count() - 1]
            if position.column < 0 {
                return Position(buffer.lines.count() - 1, 0)
            } else if position.column > line.characters.count() {
                return Position(buffer.lines.count() - 1, line.characters.count())
            } else {
                return Position(buffer.lines.count() - 1, position.column)
            }
        } else {
            // line is in range, wrap column
            line := buffer.lines[position.line]

            if wrap {
                if position.column < 0 {
                    if position.line > 0 {
                        return self.clamp_or_wrap_position(Position(
                            line    = position.line - 1
                            column  = position.column + buffer.lines[position.line - 1].characters.count() + 1
                        ), wrap)
                    } else {
                        return Position(position.line, 0)
                    }
                } else if position.column > line.characters.count() {
                    if position.line < buffer.lines.count() - 1 {
                        return self.clamp_or_wrap_position(Position(
                            line    =  position.line + 1
                            column  = position.column - line.characters.count() - 1
                        ), wrap)
                    } else {
                        return Position(position.line, line.characters.count())
                    }
                } else {
                    return position
                }
            } else {
                if position.column < 0 {
                    return Position(position.line, 0)
                } else if position.column > line.characters.count() {
                    return Position(position.line, line.characters.count())
                } else {
                    return position
                }
            }
        }
    }
}

Split :: enum {
    None        : Rc[View]
    Vertical    : Array[Split]
    Horizontal  : Array[Split]
}

impl Clone for Split {
    clone :: (&Self) -> Split {
        return match self {
            .None($view)         -> Split.None(view.clone())
            .Vertical($splits)   -> Split.Vertical(splits.clone())
            .Horizontal($splits) -> Split.Horizontal(splits.clone())
            _ -> @assert(false)
        }
    }
}

impl Split {
    get_view :: (&Self, path: []int) -> Rc[View] {
        // io.formatln("get_view({})", [path])
        if path.length == 0 {
            return self.get_first_view()
        }

        return match self {
            .None($view) -> view.clone()

            .Vertical($splits) -> {
                index := *path[0]
                splits[index.clamp(0, splits.count() - 1)].get_view(path[1..])
            }

            .Horizontal($splits) -> {
                index := *path[0]
                splits[index.clamp(0, splits.count() - 1)].get_view(path[1..])
            }

            _ -> @assert(false)
        }
    }

    get_path :: (&Self, target: &Rc[View]) -> Option[Array[int]] {
        get_path_impl :: (self: &Self, target: &Rc[View], path: &mut Array[int]) -> bool {
            return match self {
                .None($view) -> {
                    if view == target {
                        path.add(0)
                        true
                    } else {
                        false
                    }
                }

                .Vertical($splits) -> {
                    for &split in splits[..] {
                        if get_path_impl(split, target, path) {
                            path.insert_at(0, it_index)
                            return true
                        }
                    }
                    false
                }

                .Horizontal($splits) -> {
                    for &split in splits[..] {
                        if get_path_impl(split, target, path) {
                            path.insert_at(0, it_index)
                            return true
                        }
                    }
                    false
                }
            }
        }

        mut path := Array[int].new()
        if get_path_impl(self, target, &mut path) {
            // io.formatln("path: {}", [path.slice()])
            return Some(path)
        } else {
            return None
        }
    }

    close :: (&Self, path: []int) -> Split {
        close_impl :: (self: &Self, path: []int) -> Option[Split] {
            if path.length == 0 {
                return None
            }
            return match self {
                .None($view) -> None

                .Vertical($splits) -> {
                    to_close_index := *path[0]

                    closed := close_impl(splits[to_close_index], path[1..])

                    mut result := splits.clone()
                    match closed {
                        Some($split) -> {
                            *result[to_close_index] = split
                        }

                        None -> {
                            result.remove_at(to_close_index)
                        }
                    }

                    if result.count() == 0 {
                        Memory.drop(result)
                        None
                    } else if result.count() == 1 {
                        split := result[0].clone()
                        Memory.drop(result)
                        Some(split)
                    } else {
                        Some(Split.Vertical(result))
                    }
                }

                .Horizontal($splits) -> {
                    to_close_index := *path[0]

                    closed := close_impl(splits[to_close_index], path[1..])

                    mut result := splits.clone()
                    match closed {
                        Some($split) -> {
                            *result[to_close_index] = split
                        }

                        None -> {
                            result.remove_at(to_close_index)
                        }
                    }

                    if result.count() == 0 {
                        Memory.drop(result)
                        None
                    } else if result.count() == 1 {
                        split := result[0].clone()
                        Memory.drop(result)
                        Some(split)
                    } else {
                        Some(Split.Horizontal(result))
                    }
                }

                _ -> @assert(false)
            }
        }

        return match close_impl(self, path) {
            Some($split) -> split
            None         -> self.clone()
        }
    }

    split_vertical :: (&Self, path: []int) -> Split {
        // io.formatln("split_vertical({})", [path])
        return match self {
            .None($view) -> if path.length == 1 and *path[0] == 0 {
                mut result := Array[Split].new()
                result.add(Split.None(view.clone()))
                result.add(Split.None(View.new(view.get().buffer.clone())))
                Split.Vertical(result)
            } else {
                Split.None(view.clone())
            }

            .Vertical($splits) -> {
                result := splits.clone()

                if path.length <= 1 {
                    return Split.Vertical(result)
                }

                index := *path[0]

                if index >= result.count() {
                    return Split.Vertical(result)
                }

                match result[index] {
                    .None($view) -> {
                        result.insert_at(index + 1, .None(View.new(view.get().buffer.clone())))
                    }

                    $split -> {
                        *result[index] = split.split_vertical(path[1..])
                    }

                    _ -> @assert(false)
                }

                Split.Vertical(result)
            }

            .Horizontal($splits) -> {
                result := splits.clone()

                if path.length <= 1 {
                    return Split.Horizontal(result)
                }

                index := *path[0]

                if index >= result.count() {
                    return Split.Horizontal(result)
                }

                match result[index] {
                    .None($view) -> {
                        mut split := Array[Split].new()
                        split.add(Split.None(view.clone()))
                        split.add(Split.None(View.new(view.get().buffer.clone())))
                        *result[index] = Split.Vertical(split)
                    }

                    $split -> {
                        *result[index] = split.split_vertical(path[1..])
                    }

                    _ -> @assert(false)
                }

                Split.Horizontal(result)
            }

            _ -> @assert(false)
        }
    }

    split_horizontal :: (&Self, path: []int) -> Split {
        // io.formatln("split_horizontal({})", [path])
        return match self {
            .None($view) -> if path.length == 1 and *path[0] == 0 {
                mut result := Array[Split].new()
                result.add(Split.None(view.clone()))
                result.add(Split.None(View.new(view.get().buffer.clone())))
                Split.Horizontal(result)
            } else {
                Split.None(view.clone())
            }

            .Horizontal($splits) -> {
                result := splits.clone()

                if path.length <= 1 {
                    return Split.Horizontal(result)
                }

                index := *path[0]

                if index >= result.count() {
                    return Split.Horizontal(result)
                }

                match result[index] {
                    .None($view) -> {
                        result.insert_at(index + 1, .None(View.new(view.get().buffer.clone())))
                    }

                    $split -> {
                        *result[index] = split.split_horizontal(path[1..])
                    }

                    _ -> @assert(false)
                }

                Split.Horizontal(result)
            }

            .Vertical($splits) -> {
                result := splits.clone()

                if path.length <= 1 {
                    return Split.Vertical(result)
                }

                index := *path[0]

                if index >= result.count() {
                    return Split.Vertical(result)
                }

                match result[index] {
                    .None($view) -> {
                        mut split := Array[Split].new()
                        split.add(Split.None(view.clone()))
                        split.add(Split.None(View.new(view.get().buffer.clone())))
                        *result[index] = Split.Horizontal(split)
                    }

                    $split -> {
                        *result[index] = split.split_horizontal(path[1..])
                    }

                    _ -> @assert(false)
                }

                Split.Vertical(result)
            }

            _ -> @assert(false)
        }
    }

    get_first_view :: (&Self) -> Rc[View] {
        return match self {
            .None($view) -> view.clone()
            .Vertical($splits) -> {
                @assert(splits.count() > 0)
                splits[0].get_first_view()
            }
            .Horizontal($splits) -> {
                @assert(splits.count() > 0)
                splits[0].get_first_view()
            }
            _ -> @assert(false)
        }
    }

    get_vertical_view :: (&Self, path: &mut Array[int], offset: int) -> bool {
        @assert(offset == 1 or offset == -1)
        get_vertical_view_impl :: (self: &Self, index: int, path: &mut Array[int], offset: int) -> (found: bool, moved: bool) {
            return match self {
                .None($view) -> {
                    if index == path.count() - 1 and *path[index] == 0 {
                        true, false
                    } else {
                        false, false
                    }
                }

                .Vertical($splits) -> {
                    @assert(index < path.count() - 1)
                    split_index := *path[index]
                    if split_index >= splits.count() {
                        return false, false
                    }

                    found, moved := get_vertical_view_impl(splits[split_index], index + 1, path, offset)
                    if moved {
                        return found, true
                    }

                    if found {
                        new_index := split_index + offset
                        if new_index < 0 or new_index >= splits.count() {
                            return true, false
                        }

                        *path[index] = new_index

                        match splits[new_index] {
                            .Horizontal($vert) -> {
                                *path[index + 1] = path[index + 1].clamp(0, vert.count() - 1)
                                path.resize(index + 2)
                            }

                            _ -> {
                                path.resize(index + 1)
                            }
                        }
                        return true, true
                    }

                    false, false
                }

                .Horizontal($splits) -> {
                    @assert(index < path.count())
                    split_index := *path[index]
                    if split_index >= splits.count() {
                        return false, false
                    }

                    get_vertical_view_impl(splits[split_index], index + 1, path, offset)
                }
            }
        }

        found, moved := get_vertical_view_impl(self, 0, path, offset)
        return found and moved
    }

    get_horizontal_view :: (&Self, path: &mut Array[int], offset: int) -> bool {
        @assert(offset == 1 or offset == -1)
        get_horizontal_view_impl :: (self: &Self, index: int, path: &mut Array[int], offset: int) -> (found: bool, moved: bool) {
            return match self {
                .None($view) -> {
                    if index == path.count() - 1 and *path[index] == 0 {
                        true, false
                    } else {
                        false, false
                    }
                }

                .Horizontal($splits) -> {
                    @assert(index < path.count() - 1)
                    split_index := *path[index]
                    if split_index >= splits.count() {
                        return false, false
                    }

                    found, moved := get_horizontal_view_impl(splits[split_index], index + 1, path, offset)
                    if moved {
                        return found, true
                    }

                    if found {
                        new_index := split_index + offset
                        if new_index < 0 or new_index >= splits.count() {
                            return true, false
                        }

                        *path[index] = new_index

                        match splits[new_index] {
                            .Vertical($hor) -> {
                                *path[index + 1] = path[index + 1].clamp(0, hor.count() - 1)
                                path.resize(index + 2)
                            }

                            _ -> {
                                path.resize(index + 1)
                            }
                        }
                        return true, true
                    }

                    false, false
                }

                .Vertical($splits) -> {
                    @assert(index < path.count())
                    split_index := *path[index]
                    if split_index >= splits.count() {
                        return false, false
                    }

                    get_horizontal_view_impl(splits[split_index], index + 1, path, offset)
                }
            }
        }

        found, moved := get_horizontal_view_impl(self, 0, path, offset)
        return found and moved
    }

    get_preferred_size :: (&Self) -> (width: int, height: int) {
        return match self {
            .None($view) -> view.get().preferred_size
            .Vertical($splits) -> {
                mut width, height := 0, 0
                for &split in splits[..] {
                    size := split.get_preferred_size()
                    width += size.width
                    height = max(height, size.height)
                }
                return width, height
            }
            .Horizontal($splits) -> {
                mut width, height := 0, 0
                for &split in splits[..] {
                    size := split.get_preferred_size()
                    width = max(width, size.width)
                    height += size.height
                }
                return width, height
            }
            _ -> @assert(false)
        }
    }
}

Tab :: struct {
    split       : Split
    active_view : Rc[View]
}

impl Tab {
    new :: (view: Rc[View]) -> Rc[Tab] {
        return Rc[Tab].new(Tab(
            split       = Split.None(view.clone())
            active_view = view
        ))
    }

    get_active_view :: (&Self) -> Rc[View] {
        return self.active_view.clone()
    }

    split_vertical :: (&mut Self, target: Rc[View]) {
        path := self.split.get_path(&target)
        match path {
            .Some($path) -> {
                new_split := self.split.split_vertical(path.slice())
                self.split = new_split
            }

            .None -> {}
        }
    }

    split_horizontal :: (&mut Self, target: Rc[View]) {
        path := self.split.get_path(&target)
        match path {
            .Some($path) -> {
                new_split := self.split.split_horizontal(path.slice())
                self.split = new_split
            }

            .None -> {}
        }
    }

    move_vertical_split :: (&mut Self, offset: int) {
        @assert(offset == 1 or offset == -1)
        mut path := try_with(self.split.get_path(&self.active_view), {
            return
        })
        // io.formatln("move_vertical_split({}): path={}", [offset, path.slice()])
        if self.split.get_vertical_view(&mut path, offset) {
            // io.formatln("move_vertical_split({}): path={}", [offset, path.slice()])
            self.active_view = self.split.get_view(path.slice())
        }
    }

    move_horizontal_split :: (&mut Self, offset: int) {
        @assert(offset == 1 or offset == -1)
        mut path := try_with(self.split.get_path(&self.active_view), {
            return
        })
        // io.formatln("move_horizontal_split({}): path={}", [offset, path.slice()])
        if self.split.get_horizontal_view(&mut path, offset) {
            // io.formatln("move_horizontal_split({}): path={}", [offset, path.slice()])
            self.active_view = self.split.get_view(path.slice())
        }
    }

    close_view :: (&mut Self) {
        path := try_with(self.split.get_path(&self.active_view), {
            return
        })
        new_split := self.split.close(path.slice())
        self.split = new_split
        self.active_view = self.split.get_view(path.slice())
    }
}