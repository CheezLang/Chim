use import std.rc
use import std.string
use import std.array

io  :: import std.io
fmt :: import std.fmt

use import glfw
use import glfw_hl

use import chim
use import editor
use import gap_buffer
use import editor_input
use import editor_render
use import clipboard

#export_scope

Argument :: enum {
    Char    : char
    Str     : String
    Move    : MoveCommand
    // Command : CommandType
}

impl Clone for Argument {
    clone :: (&Self) -> Argument {
        return match self {
            .Str($str) -> .Str(str.clone())
            $arg -> *arg
        }
    }
}

MoveCommand :: enum #copy {
    Left, Right, Up, Down
    Home, End
    BufferHome, BufferEnd
    PageUp, PageDown

    SelectLeft, SelectRight, SelectUp, SelectDown
    SelectHome, SelectEnd
    SelectBufferHome, SelectBufferEnd
    SelectPageUp, SelectPageDown

    GoToLineAbsolute
    GoToLineRelativeTop
    GoToChar            : char
    GoBeforeChar        : char
    GoToCharBack        : char
    GoBeforeCharBack    : char
}

EditCommand :: enum {
    InsertTab
    IndentLine, DeindentLine
    Undo, Redo
    Copy, Paste
    InsertChar : char
    InsertText : String
}

ViewCommand :: enum #copy {
    AddCursorAbove, AddCursorBelow
}

CommandType :: enum {
    Move            : MoveCommand
    Edit            : EditCommand
    View            : ViewCommand
    SwitchMode      : InputMode
    ActivateCommandLine, CancelCommandLine
    ChangeFontSize  : f32
    ChangeFont      : String
    Script          : (ref: int, args: Array[Argument])
    ExecuteCommand
    TabNext, TabPrev
    DeleteLeft, DeleteRight
    DeleteLine
    BufferSave
    RepeatLastMove
    RepeatLastMoveInv
    SplitVertical, SplitHorizontal
    NextVerticalSplit, PrevVerticalSplit
    NextHorizontalSplit, PrevHorizontalSplit
    CloseView
}

impl Clone for CommandType {
    clone :: (&Self) -> CommandType {
        return match self {
            .ChangeFont($str) -> .ChangeFont(str.clone())
            .Edit($edit) -> .Edit(match edit {
                EditCommand.InsertText($str) -> EditCommand.InsertText(str.clone())
                $cmd -> *cmd
            })
            .Script($script) -> .Script(script.ref, script.args.clone())
            $cmd -> *cmd
        }
    }
}

Command :: struct {
    count   : int
    typ     : CommandType
}

impl Command {
    parse :: (count: int, command: string, args: []Argument) -> Result[Command, String] {
        get_argument :: (args: []Argument, index: int) -> Result[Argument, String] {
            if index < 0 or index >= args.length {
                return Err(fmt.format("No argument at index {}", [index]))
            }
    
            return Ok(args[index].clone())
        }

        if command.starts_with("move.") {
            name := command[5..]
            typ := if name == "repeat" {
                CommandType.RepeatLastMove
            } else if name == "repeat_inv" {
                CommandType.RepeatLastMoveInv
            } else if name == "left" {
                CommandType.Move(MoveCommand.Left)
            } else if name == "right" {
                CommandType.Move(MoveCommand.Right)
            } else if name == "up" {
                CommandType.Move(MoveCommand.Up)
            } else if name == "down" {
                CommandType.Move(MoveCommand.Down)
            } else if name == "line_home" {
                CommandType.Move(MoveCommand.Home)
            } else if name == "line_end" {
                CommandType.Move(MoveCommand.End)
            } else if name == "buffer_home" {
                CommandType.Move(MoveCommand.BufferHome)
            } else if name == "buffer_end" {
                CommandType.Move(MoveCommand.BufferEnd)
            } else if name == "page_up" {
                CommandType.Move(MoveCommand.PageUp)
            } else if name == "page_down" {
                CommandType.Move(MoveCommand.PageDown)
            } else if name == "select_left" {
                CommandType.Move(MoveCommand.SelectLeft)
            } else if name == "select_right" {
                CommandType.Move(MoveCommand.SelectRight)
            } else if name == "select_up" {
                CommandType.Move(MoveCommand.SelectUp)
            } else if name == "select_down" {
                CommandType.Move(MoveCommand.SelectDown)
            } else if name == "select_line_home" {
                CommandType.Move(MoveCommand.SelectHome)
            } else if name == "select_line_end" {
                CommandType.Move(MoveCommand.SelectEnd)
            } else if name == "select_buffer_home" {
                CommandType.Move(MoveCommand.SelectBufferHome)
            } else if name == "select_buffer_end" {
                CommandType.Move(MoveCommand.SelectBufferEnd)
            } else if name == "select_page_up" {
                CommandType.Move(MoveCommand.SelectPageUp)
            } else if name == "select_page_down" {
                CommandType.Move(MoveCommand.SelectPageDown)
            } else if name == "goto_line_absolute" {
                CommandType.Move(MoveCommand.GoToLineAbsolute)
            } else if name == "goto_line_relative_top" {
                CommandType.Move(MoveCommand.GoToLineRelativeTop)
            } else if name == "goto_char" {
                match get_argument(args, 0) {
                    .Ok(Argument.Char($ch)) -> CommandType.Move(MoveCommand.GoToChar(ch))
                    .Ok($arg) -> {
                        return Err(fmt.format("[goto_char] Wrong argument type: {}", [&arg]))
                    }
                    .Err($err) -> {
                        return Err(fmt.format("[goto_char] {}", [&err]))
                    }
                }
            } else if name == "go_before_char" {
                match get_argument(args, 0) {
                    .Ok(Argument.Char($ch)) -> CommandType.Move(MoveCommand.GoBeforeChar(ch))
                    .Ok($arg) -> {
                        return Err(fmt.format("[go_before_char] Wrong argument type: {}", [&arg]))
                    }
                    .Err($err) -> {
                        return Err(fmt.format("[go_before_char] {}", [&err]))
                    }
                }
            } else if name == "goto_char_back" {
                match get_argument(args, 0) {
                    .Ok(Argument.Char($ch)) -> CommandType.Move(MoveCommand.GoToCharBack(ch))
                    .Ok($arg) -> {
                        return Err(fmt.format("[goto_char_back] Wrong argument type: {}", [&arg]))
                    }
                    .Err($err) -> {
                        return Err(fmt.format("[goto_char_back] {}", [&err]))
                    }
                }
            } else if name == "go_before_char_back" {
                match get_argument(args, 0) {
                    .Ok(Argument.Char($ch)) -> CommandType.Move(MoveCommand.GoBeforeCharBack(ch))
                    .Ok($arg) -> {
                        return Err(fmt.format("[go_before_char_back] Wrong argument type: {}", [&arg]))
                    }
                    .Err($err) -> {
                        return Err(fmt.format("[go_before_char_back] {}", [&err]))
                    }
                }
            } else {
                return Err(fmt.format("Unknown move command: '{}'", [command]))
            }

            return Ok(Command(count, typ))
        } else if command.starts_with("editor.") {
            name := command[7..]

            typ := if name == "tab_next" {
                CommandType.TabNext
            } else if name == "tab_prev" {
                CommandType.TabPrev
            } else if name == "mode_insert" {
                CommandType.SwitchMode(InputMode.Insert)
            } else if name == "mode_normal" {
                CommandType.SwitchMode(InputMode.Normal)
            } else if name == "activate_command_line" {
                CommandType.ActivateCommandLine
            } else if name == "cancel_command_line" {
                CommandType.CancelCommandLine
            } else if name == "execute_command" {
                CommandType.ExecuteCommand
            } else if name == "buffer_save" {
                CommandType.BufferSave
            } else if name == "split_vertical" {
                CommandType.SplitVertical
            } else if name == "split_horizontal" {
                CommandType.SplitHorizontal
            } else if name == "next_vertical_split" {
                CommandType.NextVerticalSplit
            } else if name == "prev_vertical_split" {
                CommandType.PrevVerticalSplit
            } else if name == "next_horizontal_split" {
                CommandType.NextHorizontalSplit
            } else if name == "prev_horizontal_split" {
                CommandType.PrevHorizontalSplit
            } else if name == "close_view" {
                CommandType.CloseView
            } else {
                return Err(fmt.format("Unknown editor command: '{}'", [command]))
            }

            return Ok(Command(count, typ))
        } else if command.starts_with("buffer.") {
            name := command[7..]

            typ := if name == "delete_line" {
                CommandType.DeleteLine
            } else if name == "delete_left" {
                CommandType.DeleteLeft
            } else if name == "delete_right" {
                CommandType.DeleteRight
            } else if name == "insert_tab" {
                CommandType.Edit(EditCommand.InsertTab)
            } else if name == "indent_line" {
                CommandType.Edit(EditCommand.IndentLine)
            } else if name == "deindent_line" {
                CommandType.Edit(EditCommand.DeindentLine)
            } else if name == "undo" {
                CommandType.Edit(EditCommand.Undo)
            } else if name == "redo" {
                CommandType.Edit(EditCommand.Redo)
            } else if name == "copy" {
                CommandType.Edit(EditCommand.Copy)
            } else if name == "paste" {
                CommandType.Edit(EditCommand.Paste)
            } else if name == "insert_char" {
                match get_argument(args, 0) {
                    .Ok(Argument.Char($ch)) -> CommandType.Edit(EditCommand.InsertChar(ch))
                    .Ok($arg) -> {
                        return Err(fmt.format("[insert_char] Wrong argument type: {}", [&arg]))
                    }
                    .Err($err) -> {
                        return Err(fmt.format("[insert_char] {}", [&err]))
                    }
                }
            } else if name == "insert" {
                match get_argument(args, 0) {
                    .Ok(Argument.Str($str)) -> CommandType.Edit(EditCommand.InsertText(str))
                    .Ok($arg) -> {
                        return Err(fmt.format("[insert] Wrong argument type: {}", [&arg]))
                    }
                    .Err($err) -> {
                        return Err(fmt.format("[insert] {}", [&err]))
                    }
                }
            } else {
                return Err(fmt.format("Unknown view command: '{}'", [command]))
            }

            return Ok(Command(count, typ))

        } else if command.starts_with("view.") {
            name := command[5..]

            typ := if name == "add_cursor_above" {
                CommandType.View(ViewCommand.AddCursorAbove)
            } else if name == "add_cursor_below" {
                CommandType.View(ViewCommand.AddCursorBelow)
            } else {
                return Err(fmt.format("Unknown view command: '{}'", [command]))
            }

            return Ok(Command(count, typ))
        } else {
            return Err(fmt.format("Unknown command: '{}'", [command]))
        }
    }
}

impl Chim {
    execute_command :: (&mut Self, count: int, command: CommandType) {
        count := if count == 0 then 1 else count
        match command {
            .Script($script) -> {
                try_with(self.scripting_engine.get_mut().run_callback(count, script.ref, script.args[..]), {
                    io.formatln("[ERROR] execute script command: {}", [&err])
                })
            }

            .SwitchMode($mode) -> {
                self.current_mode = mode
            }

            .ActivateCommandLine -> {
                self.active_view = self.command_view.clone()
                self.last_input_mode = self.current_mode
                self.current_mode = .Insert
            }

            .CancelCommandLine -> {
                self.active_view = self.tabs[self.active_tab].get().get_active_view()
                self.current_mode = self.last_input_mode

                // clear buffer
                buffer := self.command_view.get().buffer.get_mut()
                start, end := Position(0, 0), Position(buffer.lines.count() - 1, buffer.lines[buffer.lines.count() - 1].characters.count())
                text := buffer.get_text(start, end)
                buffer.erase_range(start, Position(end.line, end.column), 0)
                buffer.flush_changes()
                self.command_view.get_mut().update_cursors()
            }

            .ExecuteCommand -> {
                // switch back to main view
                self.active_view = self.tabs[self.active_tab].get().get_active_view()
                self.current_mode = self.last_input_mode

                // get text of command buffer and execute it as a command
                buffer := self.command_view.get().buffer.get_mut()
                start, end := Position(0, 0), Position(buffer.lines.count() - 1, buffer.lines[buffer.lines.count() - 1].characters.count())
                text := buffer.get_text(start, end)
                buffer.erase_range(start, Position(end.line, end.column), 0)
                buffer.flush_changes()
                self.command_view.get_mut().update_cursors()

                command_string := text.slice()
                if command_string.starts_with(":") {
                    match Command.parse(0, command_string[1..], []) {
                        Ok($command) -> {

                        }

                        Err($err) -> {

                            io.formatln("[ERROR] {}", [&err])
                        }
                    }
                    // if command.starts_with("buffer.set_name") {
                    //     name := command[16..]
                    //     view := self.tabs[self.active_tab].get().get_active_view()
                    //     buffer := view.get().buffer.get_mut()
                    //     buffer.file = Some(name.to_owned())
                    //     buffer.dirty = true
                    // }
                } else {
                    match self.scripting_engine.get_mut().execute_script(command_string) {
                        Ok(_) -> {}
                        Err($err) -> {
                            io.formatln("[ERROR] {}", [&err])
                        }
                    }
                }
            }

            .BufferSave -> {
                view := self.active_view.clone()
                try_with(view.get().buffer.get().write_to_disk(), {
                    io.formatln("[ERROR] {}", [&err])
                })
            }

            .TabNext -> {
                for 0 .. count {
                    self.active_tab = (self.active_tab + 1) % self.tabs.count()
                }
            }

            .TabPrev -> {
                for 0 .. count {
                    self.active_tab = (self.active_tab - 1 + self.tabs.count()) % self.tabs.count()
                }
            }

            .SplitVertical -> {
                view := self.active_view.clone()
                self.tabs[self.active_tab].get_mut().split_vertical(view)
            }

            .SplitHorizontal -> {
                view := self.active_view.clone()
                self.tabs[self.active_tab].get_mut().split_horizontal(view)
            }

            .PrevVerticalSplit -> {
                view := self.active_view.clone()
                self.tabs[self.active_tab].get_mut().move_vertical_split(-1)
                self.active_view = self.tabs[self.active_tab].get().get_active_view()
            }

            .NextVerticalSplit -> {
                view := self.active_view.clone()
                self.tabs[self.active_tab].get_mut().move_vertical_split(1)
                self.active_view = self.tabs[self.active_tab].get().get_active_view()
            }

            .PrevHorizontalSplit -> {
                view := self.active_view.clone()
                self.tabs[self.active_tab].get_mut().move_horizontal_split(-1)
                self.active_view = self.tabs[self.active_tab].get().get_active_view()
            }

            .NextHorizontalSplit -> {
                view := self.active_view.clone()
                self.tabs[self.active_tab].get_mut().move_horizontal_split(1)
                self.active_view = self.tabs[self.active_tab].get().get_active_view()
            }

            .CloseView -> {
                self.tabs[self.active_tab].get_mut().close_view()
                self.active_view = self.tabs[self.active_tab].get().get_active_view()
            }

            .DeleteLine -> {
                view := self.active_view.clone()
                for 0 .. count {
                    view.get_mut().delete_line()
                }
            }

            .DeleteLeft -> {
                view := self.active_view.clone()
                for 0 .. count {
                    view.get_mut().delete_at_cursor()
                }
            }

            .DeleteRight -> {
                view := self.active_view.clone()
                for 0 .. count {
                    view.get_mut().move_cursor_column(1)
                    view.get_mut().delete_at_cursor()
                }
            }

            .View($view) -> match view {
                // .AddCursorAbove -> {
                //     view := self.active_view.clone()
                //     view.get_mut().add_cursor_below()
                // }

                .AddCursorBelow -> {
                    view := self.active_view.clone()
                    view.get_mut().add_cursor_below()
                }

                $cmd -> {
                    io.formatln("[ERROR] view command not implemented: {}", [&cmd])
                }
            }

            .Edit($edit) -> match edit {
                // .InsertTab -> {
                //     view := self.active_view.clone()
                //     if self.use_tab_char {
                //         for 0 .. count {
                //             view.get_mut().insert_char('`t')
                //         }
                //     } else {
                //         tab_width := view.get().tab_width.unwrap_or(self.tab_width)
                //         for 0 .. count {
                //             // spaces := tab_width - (view.get().cursor.column % tab_width)
                //             // for 0 .. spaces {
                //             //     view.get_mut().insert_char(' ')
                //             // }
                //         }
                //     }
                // }
                // .IndentLine -> {
                //     view := self.active_view.clone()
                //     view.get_mut().clamp_or_wrap_cursor_position(false)
                //     buffer := view.get().buffer.get_mut()
                //     cursor := &view.get().cursor
                //     if self.use_tab_char {
                //         for 0 .. count {
                //             buffer.insert_char(cursor.line, 0, '`t')
                //             cursor.column += 1
                //         }
                //     } else {
                //         tab_width := view.get().tab_width.unwrap_or(self.tab_width)

                //         mut first_non_whitespace := 0
                //         for c in &buffer.lines[cursor.line].characters {
                //             if c != ' ' and c != '`t' {
                //                 first_non_whitespace = it_index
                //                 break
                //             }
                //         }

                //         for 0 .. count {
                //             spaces := tab_width - (first_non_whitespace % tab_width)
                //             for 0 .. spaces {
                //                 buffer.insert_char(cursor.line, 0, ' ')
                //                 cursor.column += 1
                //                 first_non_whitespace += 1
                //             }
                //         }
                //     }
                // }
                // .DeindentLine -> {
                    // view := self.active_view.clone()
                    // view.get_mut().clamp_or_wrap_cursor_position(false)
                    // buffer := view.get().buffer.get_mut()
                    // cursor := &view.get().cursor

                    // mut first_non_whitespace := 0
                    // for c in &buffer.lines[cursor.line].characters {
                    //     if c != ' ' and c != '`t' {
                    //         first_non_whitespace = it_index
                    //         break
                    //     }
                    // }

                    // if self.use_tab_char {
                    //     for 0 .. count {
                    //         if first_non_whitespace > 0 {
                    //             buffer.erase_char(cursor.line, 0)
                    //             cursor.column -= 1
                    //             first_non_whitespace -= 1
                    //         }
                    //     }
                    // } else {
                    //     tab_width := view.get().tab_width.unwrap_or(self.tab_width)
                    //     for 0 .. count {
                    //         spaces := ((first_non_whitespace + tab_width - 1) % tab_width) + 1
                    //         for 0 .. spaces {
                    //             if first_non_whitespace > 0 {
                    //                 buffer.erase_char(cursor.line, 0)
                    //                 cursor.column -= 1
                    //                 first_non_whitespace -= 1
                    //             }
                    //         }
                    //     }
                    // }
                    // view.get_mut().clamp_or_wrap_cursor_position(false)
                // }

                .Undo -> {
                    view := self.active_view.clone()
                    view.get_mut().undo()
                }

                .Redo -> {
                    view := self.active_view.clone()
                    view.get_mut().redo()
                }

                .Copy -> {
                    view := self.active_view.clone()
                    text := view.get().get_selected_text()
                    match Clipboard.set_string(text.slice()) {
                        Ok() -> {}
                        Err() -> {
                            io.formatln("[ERROR] Failed to copy to clipboard")
                        }
                    }
                }

                .Paste -> {
                    view := self.active_view.clone()
                    match Clipboard.get_string() {
                        Ok($str) -> {
                            view.get_mut().insert_string(str.slice())
                        }
                        Err($err) -> {
                            io.formatln("[ERROR] Failed to paste from clipboard: {}", [err.slice()])
                        }
                    }
                }

                .InsertChar($ch) -> {
                    view := self.active_view.clone()
                    view.get_mut().insert_char(ch)
                }

                .InsertText($text) -> {
                    view := self.active_view.clone()
                    view.get_mut().insert_string(text.slice())
                }

                $cmd -> {
                    io.formatln("[ERROR] edit command not implemented: {}", [&cmd])
                }
            }

            .RepeatLastMove -> match &self.last_move_command {
                Some($mov) -> self.execute_move_command(count * mov.count, mov.command)
                None -> {}
            }

            .RepeatLastMoveInv -> match &self.last_move_command {
                Some($mov) -> self.execute_move_command(count * mov.count, mov.command.invert())
                None -> {}
            }

            .Move($move) -> {
                self.last_move_command = Some(count, move)
                self.execute_move_command(count, move)
            }

            $cmd -> {
                io.formatln("[ERROR] command not implemented: {}", [&cmd])
            }
        }
    }

    execute_move_command :: (&mut Self, count: int, command: MoveCommand) {
        match command {
            .Left -> {
                view := self.active_view.clone()
                for 0 .. count {
                    view.get_mut().move_cursor_column(-1)
                }
            }

            .Right -> {
                view := self.active_view.clone()
                for 0 .. count {
                    view.get_mut().move_cursor_column(1)
                }
            }

            .Up -> {
                view := self.active_view.clone()
                for 0 .. count {
                    view.get_mut().move_cursor_line(-1)
                }
            }

            .Down -> {
                view := self.active_view.clone()
                for 0 .. count {
                    view.get_mut().move_cursor_line(1)
                }
            }

            .Home -> {
                view := self.active_view.clone()
                for 0 .. count {
                    view.get_mut().move_cursor_column_beginning()
                }
            }

            .End -> {
                view := self.active_view.clone()
                for 0 .. count {
                    view.get_mut().move_cursor_column_end()
                }
            }

            .BufferHome -> {
                view := self.active_view.clone()
                for 0 .. count {
                    view.get_mut().move_cursor_beginning()
                }
            }

            .BufferEnd -> {
                view := self.active_view.clone()
                for 0 .. count {
                    view.get_mut().move_cursor_end()
                }
            }

            .PageUp -> {
                view := self.active_view.clone()
                for 0 .. count {
                    view.get_mut().move_cursor_line(-self.get_window_dim().rows / 2)
                }
            }

            .PageDown -> {
                view := self.active_view.clone()
                for 0 .. count {
                    view.get_mut().move_cursor_line(self.get_window_dim().rows / 2)
                }
            }

            .SelectLeft -> {
                view := self.active_view.clone()
                for 0 .. count {
                    view.get_mut().move_cursor_column(-1, true)
                }
            }

            .SelectRight -> {
                view := self.active_view.clone()
                for 0 .. count {
                    view.get_mut().move_cursor_column(1, true)
                }
            }

            .SelectUp -> {
                view := self.active_view.clone()
                for 0 .. count {
                    view.get_mut().move_cursor_line(-1, true)
                }
            }

            .SelectDown -> {
                view := self.active_view.clone()
                for 0 .. count {
                    view.get_mut().move_cursor_line(1, true)
                }
            }

            .SelectHome -> {
                view := self.active_view.clone()
                for 0 .. count {
                    view.get_mut().move_cursor_column_beginning(true)
                }
            }

            .SelectEnd -> {
                view := self.active_view.clone()
                for 0 .. count {
                    view.get_mut().move_cursor_column_end(true)
                }
            }

            .SelectBufferHome -> {
                view := self.active_view.clone()
                for 0 .. count {
                    view.get_mut().move_cursor_beginning(true)
                }
            }

            .SelectBufferEnd -> {
                view := self.active_view.clone()
                for 0 .. count {
                    view.get_mut().move_cursor_end(true)
                }
            }

            .SelectPageUp -> {
                view := self.active_view.clone()
                for 0 .. count {
                    view.get_mut().move_cursor_line(-self.get_window_dim().rows / 2, true)
                }
            }

            .SelectPageDown -> {
                view := self.active_view.clone()
                for 0 .. count {
                    view.get_mut().move_cursor_line(self.get_window_dim().rows / 2, true)
                }
            }

            .GoToLineAbsolute -> {
                view := self.active_view.clone()
                view.get_mut().set_cursor_line(count - 1)
            }

            .GoToLineRelativeTop -> {
                view := self.active_view.clone()
                view.get_mut().set_cursor_line(view.get().top_line + count - 1)
            }

            .GoToChar($ch) -> {
                view_rc := self.tabs[self.active_tab].get().get_active_view()
                view := view_rc.get_mut()

                view.update_cursors()
                for &mut cursor in view.cursors.slice_mut() {
                    line := view.buffer.get().lines[cursor.start.line]
                    move_end := cursor.empty()
                    if cursor.start.column >= line.characters.count() then continue
                    for {cursor.start.column + 1} .. line.characters.count() {
                        if *line.characters[it] == ch {
                            cursor.start.column = it
                            if move_end {
                                cursor.end = cursor.start
                            }
                            break
                        }
                    }
                }
            }

            .GoToCharBack($ch) -> {
                view_rc := self.tabs[self.active_tab].get().get_active_view()
                view := view_rc.get_mut()

                view.update_cursors()
                for &mut cursor in view.cursors.slice_mut() {
                    line := view.buffer.get().lines[cursor.start.line]
                    move_end := cursor.empty()
                    if cursor.start.column <= 0 then continue
                    for {cursor.start.column - 1} ..= 0 {
                        if *line.characters[it] == ch {
                            cursor.start.column = it
                            if move_end {
                                cursor.end = cursor.start
                            }
                            break
                        }
                    }
                }
            }

            .GoBeforeChar($ch) -> {
                view_rc := self.tabs[self.active_tab].get().get_active_view()
                view := view_rc.get_mut()

                view.update_cursors()
                for &mut cursor in view.cursors.slice_mut() {
                    line := view.buffer.get().lines[cursor.start.line]
                    move_end := cursor.empty()
                    if cursor.start.column >= line.characters.count() then continue
                    for {cursor.start.column + 1} .. line.characters.count() {
                        if *line.characters[it] == ch {
                            cursor.start.column = it - 1
                            if move_end {
                                cursor.end = cursor.start
                            }
                            break
                        }
                    }
                }
            }

            .GoBeforeCharBack($ch) -> {
                view_rc := self.tabs[self.active_tab].get().get_active_view()
                view := view_rc.get_mut()

                view.update_cursors()
                for &mut cursor in view.cursors.slice_mut() {
                    line := view.buffer.get().lines[cursor.start.line]
                    move_end := cursor.empty()
                    if cursor.start.column <= 0 then continue
                    for {cursor.start.column - 1} ..= 0 {
                        if *line.characters[it] == ch {
                            cursor.start.column = it + 1
                            if move_end {
                                cursor.end = cursor.start
                            }
                            break
                        }
                    }
                }
            }

            $cmd -> {
                io.formatln("[ERROR] move command not implemented: {}", [&cmd])
            }
        }
    }
}

impl MoveCommand {
    invert :: (&Self) -> MoveCommand {
        return match *self {
            .Left -> MoveCommand.Right
            .Right -> MoveCommand.Left
            .Up -> MoveCommand.Down
            .Down -> MoveCommand.Up
            .Home -> MoveCommand.End
            .End -> MoveCommand.Home
            .BufferHome -> MoveCommand.BufferEnd
            .BufferEnd -> MoveCommand.BufferHome
            .PageUp -> MoveCommand.PageDown
            .PageDown -> MoveCommand.PageUp
            .SelectLeft -> MoveCommand.SelectRight
            .SelectRight -> MoveCommand.SelectLeft
            .SelectUp -> MoveCommand.SelectDown
            .SelectDown -> MoveCommand.SelectUp
            .SelectHome -> MoveCommand.SelectEnd
            .SelectEnd -> MoveCommand.SelectHome
            .SelectBufferHome -> MoveCommand.SelectBufferEnd
            .SelectBufferEnd -> MoveCommand.SelectBufferHome
            .SelectPageUp -> MoveCommand.SelectPageDown
            .SelectPageDown -> MoveCommand.SelectPageUp
            .GoToLineAbsolute -> MoveCommand.GoToLineAbsolute
            .GoToLineRelativeTop -> MoveCommand.GoToLineRelativeTop
            .GoToChar($ch) -> MoveCommand.GoToCharBack(ch)
            .GoToCharBack($ch) -> MoveCommand.GoToChar(ch)
            .GoBeforeChar($ch) -> MoveCommand.GoBeforeCharBack(ch)
            .GoBeforeCharBack($ch) -> MoveCommand.GoBeforeChar(ch)
            _ -> {
                @assert(false)
                MoveCommand.Home
            }
        }
    }
}