use import std.string
use import std.array
use import std.unicode
use import std.fiber
use import std.thread
use import std.mem.std_heap_allocator
use import std.rc

io  :: import std.io
fmt :: import std.fmt

use import glfw
use import glfw_hl

use import editor
use import chim
use import gap_buffer

#export_scope

KeyEventType :: enum #copy {
    Char : char
    Space
    Escape
    Enter
    Tab
    Backspace
    Insert
    Delete
    Right
    Left
    Down
    Up
    PageUp
    PageDown
    Home
    End
    CapsLock
    ScrollLock
    NumLock
    PrintScreen
    Pause
    F1
    F2
    F3
    F4
    F5
    F6
    F7
    F8
    F9
    F10
    F11
    F12
    F13
    F14
    F15
    F16
    F17
    F18
    F19
    F20
    F21
    F22
    F23
    F24
    F25
    Kp0
    Kp1
    Kp2
    Kp3
    Kp4
    Kp5
    Kp6
    Kp7
    Kp8
    Kp9
    KpDecimal
    KpDivide
    KpMultiply
    KpSubtract
    KpAdd
    KpEnter
    KpEqual
}

KeyEvent :: struct #copy {
    mods    : GlfwMod
    typ     : KeyEventType
}

impl Chim {
    key_input_parser :: (self: ^Chim) {
        loop {
            self.parse(0)
            Fiber.yield()
        }
    }

    parse :: (&mut Self, mut event_index: int) {
        use GlfwMod
        use KeyEventType

        mut repeat_count := 0

        State :: enum #copy {
            Start
            Command
        }
        mut state := State.Start

        self.active_parsers.clear()
        for &p in self.command_parsers[..] {
            self.active_parsers.add(p.clone())
        }

        mut command_index := 0

        loop {
            while self.key_events.count() <= event_index {
                Fiber.yield()
            }

            next_event := *self.key_events[event_index]
            io.formatln("event_index = {}, command_index = {}, next_event = {}", [event_index, command_index, next_event])

            match state {
                .Start -> match next_event.mods, next_event.typ {
                    None, Char($c) if c.is_digit() -> {
                        repeat_count = repeat_count * 10 + int(c - '0')
                        event_index += 1
                    }

                    _ -> {
                        state = .Command
                    }
                }

                .Command -> {
                    if repeat_count == 0 {
                        repeat_count = 1
                    }
                    io.formatln("repeat_count: {}", [repeat_count])
                    io.formatln("{} active parsers", [self.active_parsers.count()])

                    mut new_active_parsers := Array[Rc[CommandParser]].new(self.active_parsers.count())
                    for &p in self.active_parsers[..] {
                        steps := p.get().steps[..]
                        if command_index >= steps.length {
                            continue
                        }
                        step := steps[command_index]
                        match step {
                            .Key($event) -> {
                                types_match := match event.typ, next_event.typ {
                                    Char($c1), Char($c2) -> c1 == c2
                                    $t1, $t2 -> t1 == t2
                                }
                                if event.mods == next_event.mods and types_match {
                                    new_active_parsers.add(p.clone())
                                }
                            }

                            .Move($ch) -> {

                            }
                        }
                    }
                    command_index += 1
                    self.active_parsers = new_active_parsers

                    io.formatln("reduced to {} active parsers", [self.active_parsers.count()])

                    if self.active_parsers.count() == 0 {
                        for 0 ..= event_index {
                            self.key_events.erase(event_index - it)
                        }
                        return
                    } else if self.active_parsers.count() == 1 and command_index == self.active_parsers[0].get().steps.count() {
                        for 0 ..= event_index {
                            self.key_events.erase(event_index - it)
                        }
                        parser := self.active_parsers[0].get()
                        io.formatln("finished with parser for '{}' {}", [parser.command.slice(), parser.steps[..]])
                        return
                    } else {
                        event_index += 1
                    }
                }
            }
        }
    }

    handle_key_event :: (&mut Self, event: KeyEvent) {
        // io.formatln("{}", [&event])

        self.key_events.insert(self.key_events.count(), event, &DEFAULT_STD_HEAP_ALLOCATOR)

        match self.current_mode {
            .Normal -> match event.mods, event.typ {
                use GlfwMod
                use KeyEventType

                None, Char('i') -> {
                    self.current_mode = .Insert
                }
                None, Char('t') -> {
                    self.commands.push(.TabNext)
                }
                None, Char('n') -> {
                    self.commands.push(.TabPrev)
                }

                None, Left -> {
                    view := self.tabs[self.active_tab].get().get_active_view()
                    view.get_mut().move_cursor_column(-1)
                }

                None, Right -> {
                    view := self.tabs[self.active_tab].get().get_active_view()
                    view.get_mut().move_cursor_column(1)
                }

                None, Up -> {
                    view := self.tabs[self.active_tab].get().get_active_view()
                    view.get_mut().move_cursor_line(-1)
                }

                None, Down -> {
                    view := self.tabs[self.active_tab].get().get_active_view()
                    view.get_mut().move_cursor_line(1)
                }

                None, Home -> {
                    view := self.tabs[self.active_tab].get().get_active_view()
                    view.get_mut().move_cursor_column_beginning()
                }

                None, End -> {
                    view := self.tabs[self.active_tab].get().get_active_view()
                    view.get_mut().move_cursor_column_end()
                }

                Control, Home -> {
                    view := self.tabs[self.active_tab].get().get_active_view()
                    view.get_mut().move_cursor_beginning()
                }

                Control, End -> {
                    view := self.tabs[self.active_tab].get().get_active_view()
                    view.get_mut().move_cursor_end()
                }

                Control, Char('s') -> {
                    try_with(self.current_buffer.get().write_to_disk(), {
                        io.formatln("[ERROR] {}", [&err])
                    })
                }

                $mods, $typ -> {

                }
            }

            .Insert -> match event.mods, event.typ {
                use GlfwMod
                use KeyEventType

                None, Char($c) -> {
                    tab := self.tabs[self.active_tab].get()
                    view := tab.get_active_view()
                    view.get_mut().insert_char(c)
                }
                Shift, Char($c) -> {
                    tab := self.tabs[self.active_tab].get()
                    view := tab.get_active_view()
                    view.get_mut().insert_char(c.to_upper())
                }

                None, Space -> {
                    tab := self.tabs[self.active_tab].get()
                    view := tab.get_active_view()
                    view.get_mut().insert_char(' ')
                }

                None, Tab -> {
                    tab := self.tabs[self.active_tab].get()
                    view := tab.get_active_view()
                    view.get_mut().insert_char('`t')
                }

                Control, Char('e') -> {
                    self.current_mode = .Normal
                }

                None, Escape -> {
                    self.current_mode = .Normal
                }

                None, Left -> {
                    view := self.tabs[self.active_tab].get().get_active_view()
                    view.get_mut().move_cursor_column(-1)
                }

                None, Right -> {
                    view := self.tabs[self.active_tab].get().get_active_view()
                    view.get_mut().move_cursor_column(1)
                }

                None, Up -> {
                    view := self.tabs[self.active_tab].get().get_active_view()
                    view.get_mut().move_cursor_line(-1)
                }

                None, Down -> {
                    view := self.tabs[self.active_tab].get().get_active_view()
                    view.get_mut().move_cursor_line(1)
                }

                None, Backspace -> {
                    view := self.tabs[self.active_tab].get().get_active_view()
                    view.get_mut().delete_at_cursor()
                }

                None, Delete -> {
                    view := self.tabs[self.active_tab].get().get_active_view()
                    view.get_mut().move_cursor_column(1)
                    view.get_mut().delete_at_cursor()
                }

                None, Enter -> {
                    view := self.tabs[self.active_tab].get().get_active_view()
                    view.get_mut().insert_char('`n')
                }

                None, Home -> {
                    view := self.tabs[self.active_tab].get().get_active_view()
                    view.get_mut().move_cursor_column_beginning()
                }

                None, End -> {
                    view := self.tabs[self.active_tab].get().get_active_view()
                    view.get_mut().move_cursor_column_end()
                }

                Control, Home -> {
                    view := self.tabs[self.active_tab].get().get_active_view()
                    view.get_mut().move_cursor_beginning()
                }

                Control, End -> {
                    view := self.tabs[self.active_tab].get().get_active_view()
                    view.get_mut().move_cursor_end()
                }

                Control, Char('s') -> {
                    try_with(self.current_buffer.get().write_to_disk(), {
                        io.formatln("[ERROR] {}", [&err])
                    })
                }

                $mods, $typ -> {

                }
            }
        }
    }

    on_key :: (&mut Self, key: GlfwKey, scancode: i32, action: GlfwAction, mods: GlfwMod) {
        match action, key {
            use GlfwKey
            use GlfwAction
            use GlfwMod

            Press, LeftShift        -> { current_mods_l = current_mods_l or Shift }
            Release, LeftShift      -> { current_mods_l = current_mods_l and !Shift }
            Press, RightShift       -> { current_mods_r = current_mods_r or Shift }
            Release, RightShift     -> { current_mods_r = current_mods_r and !Shift }

            Press, LeftControl      -> { current_mods_l = current_mods_l or Control }
            Release, LeftControl    -> { current_mods_l = current_mods_l and !Control }
            Press, RightControl     -> { current_mods_r = current_mods_r or Control }
            Release, RightControl   -> { current_mods_r = current_mods_r and !Control }

            Press, LeftAlt          -> { current_mods_l = current_mods_l or Alt }
            Release, LeftAlt        -> { current_mods_l = current_mods_l and !Alt }
            Press, RightAlt         -> { current_mods_r = current_mods_r or Alt }
            Release, RightAlt       -> { current_mods_r = current_mods_r and !Alt }

            Press, LeftSuper        -> { current_mods_l = current_mods_l or Super }
            Release, LeftSuper      -> { current_mods_l = current_mods_l and !Super }
            Press, RightSuper       -> { current_mods_r = current_mods_r or Super }
            Release, RightSuper     -> { current_mods_r = current_mods_r and !Super }

            Press, F1               -> {
                self.show_debug_window = !self.show_debug_window
                return
            }

            Press, F2               -> {
                self.show_demo_window = !self.show_demo_window
                return
            }

            _ -> {}
        }

        current_mods = current_mods_l or current_mods_r

        if !self.has_focus {
            return
        }

        if action == .Press or action == .Repeat {
            mut mods := self.current_mods
            typ := match key {
                GlfwKey._0 if mods == .Control -> KeyEventType.Char('0')
                GlfwKey._1 if mods == .Control -> KeyEventType.Char('1')
                GlfwKey._2 if mods == .Control -> KeyEventType.Char('2')
                GlfwKey._3 if mods == .Control -> KeyEventType.Char('3')
                GlfwKey._4 if mods == .Control -> KeyEventType.Char('4')
                GlfwKey._5 if mods == .Control -> KeyEventType.Char('5')
                GlfwKey._6 if mods == .Control -> KeyEventType.Char('6')
                GlfwKey._7 if mods == .Control -> KeyEventType.Char('7')
                GlfwKey._8 if mods == .Control -> KeyEventType.Char('8')
                GlfwKey._9 if mods == .Control -> KeyEventType.Char('9')
                GlfwKey.A if mods != .None and mods != .Shift -> KeyEventType.Char('a')
                GlfwKey.B if mods != .None and mods != .Shift -> KeyEventType.Char('b')
                GlfwKey.C if mods != .None and mods != .Shift -> KeyEventType.Char('c')
                GlfwKey.D if mods != .None and mods != .Shift -> KeyEventType.Char('d')
                GlfwKey.E if (GlfwMod.Control or GlfwMod.Alt is in mods) -> {
                    mods = mods and !(GlfwMod.Control or GlfwMod.Alt)
                    KeyEventType.Char('€')
                }
                GlfwKey.E if mods != .None and mods != .Shift -> KeyEventType.Char('e')
                GlfwKey.F if mods != .None and mods != .Shift -> KeyEventType.Char('f')
                GlfwKey.G if mods != .None and mods != .Shift -> KeyEventType.Char('g')
                GlfwKey.H if mods != .None and mods != .Shift -> KeyEventType.Char('h')
                GlfwKey.I if mods != .None and mods != .Shift -> KeyEventType.Char('i')
                GlfwKey.J if mods != .None and mods != .Shift -> KeyEventType.Char('j')
                GlfwKey.K if mods != .None and mods != .Shift -> KeyEventType.Char('k')
                GlfwKey.L if mods != .None and mods != .Shift -> KeyEventType.Char('l')
                GlfwKey.M if mods != .None and mods != .Shift -> KeyEventType.Char('m')
                GlfwKey.N if mods != .None and mods != .Shift -> KeyEventType.Char('n')
                GlfwKey.O if mods != .None and mods != .Shift -> KeyEventType.Char('o')
                GlfwKey.P if mods != .None and mods != .Shift -> KeyEventType.Char('p')
                GlfwKey.Q if (GlfwMod.Control or GlfwMod.Alt is in mods) -> {
                    mods = mods and !(GlfwMod.Control or GlfwMod.Alt)
                    KeyEventType.Char('@')
                }
                GlfwKey.Q if mods != .None and mods != .Shift -> KeyEventType.Char('q')
                GlfwKey.R if mods != .None and mods != .Shift -> KeyEventType.Char('r')
                GlfwKey.S if mods != .None and mods != .Shift -> KeyEventType.Char('s')
                GlfwKey.T if mods != .None and mods != .Shift -> KeyEventType.Char('t')
                GlfwKey.U if mods != .None and mods != .Shift -> KeyEventType.Char('u')
                GlfwKey.V if mods != .None and mods != .Shift -> KeyEventType.Char('v')
                GlfwKey.W if mods != .None and mods != .Shift -> KeyEventType.Char('w')
                GlfwKey.X if mods != .None and mods != .Shift -> KeyEventType.Char('x')
                GlfwKey.Y if mods != .None and mods != .Shift -> KeyEventType.Char('y')
                GlfwKey.Z if mods != .None and mods != .Shift -> KeyEventType.Char('z')

                GlfwKey.Apostrophe  if (GlfwMod.Control is in mods) or (GlfwMod.Alt is in mods) -> KeyEventType.Char('ä')
                GlfwKey.Semicolon   if (GlfwMod.Control is in mods) or (GlfwMod.Alt is in mods) -> KeyEventType.Char('ö')
                GlfwKey.LeftBracket if (GlfwMod.Control is in mods) or (GlfwMod.Alt is in mods) -> KeyEventType.Char('ü')

                GlfwKey.Space if self.current_mods != .None -> KeyEventType.Space
                GlfwKey.Escape -> KeyEventType.Escape
                GlfwKey.Enter -> KeyEventType.Enter
                GlfwKey.Tab -> KeyEventType.Tab
                GlfwKey.Backspace -> KeyEventType.Backspace
                GlfwKey.Insert -> KeyEventType.Insert
                GlfwKey.Delete -> KeyEventType.Delete
                GlfwKey.Right -> KeyEventType.Right
                GlfwKey.Left -> KeyEventType.Left
                GlfwKey.Down -> KeyEventType.Down
                GlfwKey.Up -> KeyEventType.Up
                GlfwKey.PageUp -> KeyEventType.PageUp
                GlfwKey.PageDown -> KeyEventType.PageDown
                GlfwKey.Home -> KeyEventType.Home
                GlfwKey.End -> KeyEventType.End
                GlfwKey.CapsLock -> KeyEventType.CapsLock
                GlfwKey.ScrollLock -> KeyEventType.ScrollLock
                GlfwKey.NumLock -> KeyEventType.NumLock
                GlfwKey.PrintScreen -> KeyEventType.PrintScreen
                GlfwKey.Pause -> KeyEventType.Pause
                GlfwKey.F1 -> KeyEventType.F1
                GlfwKey.F2 -> KeyEventType.F2
                GlfwKey.F3 -> KeyEventType.F3
                GlfwKey.F4 -> KeyEventType.F4
                GlfwKey.F5 -> KeyEventType.F5
                GlfwKey.F6 -> KeyEventType.F6
                GlfwKey.F7 -> KeyEventType.F7
                GlfwKey.F8 -> KeyEventType.F8
                GlfwKey.F9 -> KeyEventType.F9
                GlfwKey.F10 -> KeyEventType.F10
                GlfwKey.F11 -> KeyEventType.F11
                GlfwKey.F12 -> KeyEventType.F12
                GlfwKey.F13 -> KeyEventType.F13
                GlfwKey.F14 -> KeyEventType.F14
                GlfwKey.F15 -> KeyEventType.F15
                GlfwKey.F16 -> KeyEventType.F16
                GlfwKey.F17 -> KeyEventType.F17
                GlfwKey.F18 -> KeyEventType.F18
                GlfwKey.F19 -> KeyEventType.F19
                GlfwKey.F20 -> KeyEventType.F20
                GlfwKey.F21 -> KeyEventType.F21
                GlfwKey.F22 -> KeyEventType.F22
                GlfwKey.F23 -> KeyEventType.F23
                GlfwKey.F24 -> KeyEventType.F24
                GlfwKey.F25 -> KeyEventType.F25
                GlfwKey.Kp0 -> KeyEventType.Kp0
                GlfwKey.Kp1 -> KeyEventType.Kp1
                GlfwKey.Kp2 -> KeyEventType.Kp2
                GlfwKey.Kp3 -> KeyEventType.Kp3
                GlfwKey.Kp4 -> KeyEventType.Kp4
                GlfwKey.Kp5 -> KeyEventType.Kp5
                GlfwKey.Kp6 -> KeyEventType.Kp6
                GlfwKey.Kp7 -> KeyEventType.Kp7
                GlfwKey.Kp8 -> KeyEventType.Kp8
                GlfwKey.Kp9 -> KeyEventType.Kp9
                GlfwKey.KpDecimal -> KeyEventType.KpDecimal
                GlfwKey.KpDivide -> KeyEventType.KpDivide
                GlfwKey.KpMultiply -> KeyEventType.KpMultiply
                GlfwKey.KpSubtract -> KeyEventType.KpSubtract
                GlfwKey.KpAdd -> KeyEventType.KpAdd
                GlfwKey.KpEnter -> KeyEventType.KpEnter
                GlfwKey.KpEqual -> KeyEventType.KpEqual

                _ -> {
                    // io.formatln("                                                              ignoring key {}, {}, {}", [key, action, mods])
                    return
                }
            }

            self.handle_key_event(KeyEvent(mods, typ))
        }
    }

    on_char :: (&mut Self, c: char) {
        if !self.has_focus {
            return
        }

        if c == '@' or c == '€' or (c == ' ' and self.current_mods != .None) {
            return
        }

        if c == ' ' {
            self.handle_key_event(KeyEvent(self.current_mods, KeyEventType.Space))
            return
        }

        mods, c := if c.is_alpha() or c.is_digit() {
            if (c >= 'A' and c <= 'Z') or (c == 'Ä' or c == 'Ö' or c == 'Ü') {
                self.current_mods or GlfwMod.Shift, c.to_lower()
            } else {
                self.current_mods, c
            }
        } else {
            GlfwMod.None, c
        }

        self.handle_key_event(KeyEvent(mods, KeyEventType.Char(c)))
    }
}